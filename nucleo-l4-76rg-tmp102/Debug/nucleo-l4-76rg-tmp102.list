
nucleo-l4-76rg-tmp102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc0  08004dc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dc8  08004dc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dcc  08004dcc  00014dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08004e40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004e40  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab3  00000000  00000000  0002d14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002f778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026226  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000989b  00000000  00000000  0005642e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea4d3  00000000  00000000  0005fcc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a19c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003350  00000000  00000000  0014a218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d08 	.word	0x08004d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004d08 	.word	0x08004d08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fb67 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f89f 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 f985 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dce:	f000 f953 	bl	8001078 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dd2:	f000 f911 	bl	8000ff8 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// tell TMP102 that we want to read from the temperature register
	buf[0] = REG_TMP;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000dda:	2390      	movs	r3, #144	; 0x90
 8000ddc:	b299      	uxth	r1, r3
 8000dde:	1d3a      	adds	r2, r7, #4
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2301      	movs	r3, #1
 8000de8:	483f      	ldr	r0, [pc, #252]	; (8000ee8 <main+0x12c>)
 8000dea:	f000 ff27 	bl	8001c3c <HAL_I2C_Master_Transmit>
 8000dee:	4603      	mov	r3, r0
 8000df0:	757b      	strb	r3, [r7, #21]
	if (ret != HAL_OK) {
 8000df2:	7d7b      	ldrb	r3, [r7, #21]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d008      	beq.n	8000e0a <main+0x4e>
		strcpy((char*)buf, "Error Tx\r\n");
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4a3c      	ldr	r2, [pc, #240]	; (8000eec <main+0x130>)
 8000dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dfe:	c303      	stmia	r3!, {r0, r1}
 8000e00:	801a      	strh	r2, [r3, #0]
 8000e02:	3302      	adds	r3, #2
 8000e04:	0c12      	lsrs	r2, r2, #16
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e05c      	b.n	8000ec4 <main+0x108>
	} else {
		// read 2 bytes from the temperature register
		ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000e0a:	2390      	movs	r3, #144	; 0x90
 8000e0c:	b299      	uxth	r1, r3
 8000e0e:	1d3a      	adds	r2, r7, #4
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	4833      	ldr	r0, [pc, #204]	; (8000ee8 <main+0x12c>)
 8000e1a:	f001 f803 	bl	8001e24 <HAL_I2C_Master_Receive>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	757b      	strb	r3, [r7, #21]
		if (ret != HAL_OK) {
 8000e22:	7d7b      	ldrb	r3, [r7, #21]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d008      	beq.n	8000e3a <main+0x7e>
			strcpy((char*)buf, "Error Rx\r\n");
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <main+0x134>)
 8000e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e2e:	c303      	stmia	r3!, {r0, r1}
 8000e30:	801a      	strh	r2, [r3, #0]
 8000e32:	3302      	adds	r3, #2
 8000e34:	0c12      	lsrs	r2, r2, #16
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e044      	b.n	8000ec4 <main+0x108>
		} else {
			// combine the two bytes
			val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000e3a:	793b      	ldrb	r3, [r7, #4]
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	797b      	ldrb	r3, [r7, #5]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	82fb      	strh	r3, [r7, #22]
			// convert to 2's complement if the temperature is negative
			if (val > 0x7FF){
 8000e4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e54:	db05      	blt.n	8000e62 <main+0xa6>
				val |= 0xF000;
 8000e56:	8afb      	ldrh	r3, [r7, #22]
 8000e58:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000e5c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000e60:	82fb      	strh	r3, [r7, #22]
			}
			// convert to float temperature value in Celcius
			temp_c = val * 0.0625;
 8000e62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb5c 	bl	8000524 <__aeabi_i2d>
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <main+0x138>)
 8000e72:	f7ff fbc1 	bl	80005f8 <__aeabi_dmul>
 8000e76:	4603      	mov	r3, r0
 8000e78:	460c      	mov	r4, r1
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fdcd 	bl	8000a1c <__aeabi_d2f>
 8000e82:	4603      	mov	r3, r0
 8000e84:	613b      	str	r3, [r7, #16]
			// convert temperature to decimal format
			temp_c *= 100;
 8000e86:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e8a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ef8 <main+0x13c>
 8000e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e92:	edc7 7a04 	vstr	s15, [r7, #16]
			sprintf((char*)buf, "%u.%02u C\r\n", ((unsigned int)temp_c / 100), ((unsigned int)temp_c * 100));
 8000e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 2a90 	vmov	r2, s15
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <main+0x140>)
 8000ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ea8:	095a      	lsrs	r2, r3, #5
 8000eaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb2:	ee17 1a90 	vmov	r1, s15
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	fb03 f301 	mul.w	r3, r3, r1
 8000ebc:	1d38      	adds	r0, r7, #4
 8000ebe:	4910      	ldr	r1, [pc, #64]	; (8000f00 <main+0x144>)
 8000ec0:	f003 fb1c 	bl	80044fc <siprintf>
		}
	}
	// send out buffer (temperature or error message)
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff f982 	bl	80001d0 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	1d39      	adds	r1, r7, #4
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <main+0x148>)
 8000ed8:	f002 fe5e 	bl	8003b98 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee0:	f000 fb54 	bl	800158c <HAL_Delay>
	buf[0] = REG_TMP;
 8000ee4:	e777      	b.n	8000dd6 <main+0x1a>
 8000ee6:	bf00      	nop
 8000ee8:	20000098 	.word	0x20000098
 8000eec:	08004d20 	.word	0x08004d20
 8000ef0:	08004d2c 	.word	0x08004d2c
 8000ef4:	3fb00000 	.word	0x3fb00000
 8000ef8:	42c80000 	.word	0x42c80000
 8000efc:	51eb851f 	.word	0x51eb851f
 8000f00:	08004d38 	.word	0x08004d38
 8000f04:	200000e4 	.word	0x200000e4

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0b8      	sub	sp, #224	; 0xe0
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f12:	2244      	movs	r2, #68	; 0x44
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fae8 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2288      	movs	r2, #136	; 0x88
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fada 	bl	80044ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f46:	2310      	movs	r3, #16
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f5e:	230a      	movs	r3, #10
 8000f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f64:	2307      	movs	r3, #7
 8000f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fb24 	bl	80025c8 <HAL_RCC_OscConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f86:	f000 f90f 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fa8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fac:	2104      	movs	r1, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fef0 	bl	8002d94 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fba:	f000 f8f5 	bl	80011a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000fbe:	2342      	movs	r3, #66	; 0x42
 8000fc0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 f8e5 	bl	800319c <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fd8:	f000 f8e6 	bl	80011a8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fe0:	f001 fa9c 	bl	800251c <HAL_PWREx_ControlVoltageScaling>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000fea:	f000 f8dd 	bl	80011a8 <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37e0      	adds	r7, #224	; 0xe0
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_I2C1_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_I2C1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_I2C1_Init+0x74>)
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <MX_I2C1_Init+0x7c>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_I2C1_Init+0x74>)
 8001010:	2201      	movs	r2, #1
 8001012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_I2C1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_I2C1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <MX_I2C1_Init+0x74>)
 8001034:	f000 fd72 	bl	8001b1c <HAL_I2C_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800103e:	f000 f8b3 	bl	80011a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <MX_I2C1_Init+0x74>)
 8001046:	f001 f9c3 	bl	80023d0 <HAL_I2CEx_ConfigAnalogFilter>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001050:	f000 f8aa 	bl	80011a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_I2C1_Init+0x74>)
 8001058:	f001 fa05 	bl	8002466 <HAL_I2CEx_ConfigDigitalFilter>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001062:	f000 f8a1 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000098 	.word	0x20000098
 8001070:	40005400 	.word	0x40005400
 8001074:	10909cec 	.word	0x10909cec

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <MX_USART2_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010bc:	f002 fd1e 	bl	8003afc <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f000 f86f 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000e4 	.word	0x200000e4
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <MX_GPIO_Init+0xc4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a2a      	ldr	r2, [pc, #168]	; (800119c <MX_GPIO_Init+0xc4>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_GPIO_Init+0xc4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <MX_GPIO_Init+0xc4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a24      	ldr	r2, [pc, #144]	; (800119c <MX_GPIO_Init+0xc4>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_GPIO_Init+0xc4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_GPIO_Init+0xc4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_GPIO_Init+0xc4>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_GPIO_Init+0xc4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_GPIO_Init+0xc4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_GPIO_Init+0xc4>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_GPIO_Init+0xc4>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2120      	movs	r1, #32
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 fcc9 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_GPIO_Init+0xc8>)
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_GPIO_Init+0xcc>)
 8001170:	f000 fb14 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001174:	2320      	movs	r3, #32
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118e:	f000 fb05 	bl	800179c <HAL_GPIO_Init>

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	10210000 	.word	0x10210000
 80011a4:	48000800 	.word	0x48000800

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_I2C_MspInit+0x7c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d128      	bne.n	8001274 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_I2C_MspInit+0x80>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <HAL_I2C_MspInit+0x80>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_I2C_MspInit+0x80>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800123a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001240:	2312      	movs	r3, #18
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001244:	2301      	movs	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800124c:	2304      	movs	r3, #4
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <HAL_I2C_MspInit+0x84>)
 8001258:	f000 faa0 	bl	800179c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_I2C_MspInit+0x80>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_I2C_MspInit+0x80>)
 8001262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001266:	6593      	str	r3, [r2, #88]	; 0x58
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_I2C_MspInit+0x80>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40005400 	.word	0x40005400
 8001280:	40021000 	.word	0x40021000
 8001284:	48000400 	.word	0x48000400

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x7c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d128      	bne.n	80012fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	6593      	str	r3, [r2, #88]	; 0x58
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012da:	230c      	movs	r3, #12
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ea:	2307      	movs	r3, #7
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fa50 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40004400 	.word	0x40004400
 8001308:	40021000 	.word	0x40021000

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f8f4 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f003 f87e 	bl	8004498 <__errno>
 800139c:	4602      	mov	r2, r0
 800139e:	230c      	movs	r3, #12
 80013a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20018000 	.word	0x20018000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	2000008c 	.word	0x2000008c
 80013d0:	20000170 	.word	0x20000170

080013d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <SystemInit+0x64>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <SystemInit+0x64>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <SystemInit+0x68>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a13      	ldr	r2, [pc, #76]	; (800143c <SystemInit+0x68>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <SystemInit+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <SystemInit+0x68>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <SystemInit+0x68>)
 8001400:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001404:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001408:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <SystemInit+0x68>)
 800140c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001410:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <SystemInit+0x68>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <SystemInit+0x68>)
 8001418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <SystemInit+0x68>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SystemInit+0x64>)
 8001426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800142a:	609a      	str	r2, [r3, #8]
#endif
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	40021000 	.word	0x40021000

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff ffc6 	bl	80013d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001448:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800144a:	e003      	b.n	8001454 <LoopCopyDataInit>

0800144c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800144e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001450:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001452:	3104      	adds	r1, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001458:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800145a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800145c:	d3f6      	bcc.n	800144c <CopyDataInit>
	ldr	r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001460:	e002      	b.n	8001468 <LoopFillZerobss>

08001462 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001462:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001464:	f842 3b04 	str.w	r3, [r2], #4

08001468 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <LoopForever+0x16>)
	cmp	r2, r3
 800146a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800146c:	d3f9      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f003 f819 	bl	80044a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff fca3 	bl	8000dbc <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800147c:	08004dd0 	.word	0x08004dd0
	ldr	r0, =_sdata
 8001480:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001484:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001488:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800148c:	2000016c 	.word	0x2000016c

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_Init+0x3c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_Init+0x3c>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 f942 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 f80f 	bl	80014d4 <HAL_InitTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	e001      	b.n	80014c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c2:	f7ff fe79 	bl	80011b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_InitTick+0x6c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_InitTick+0x70>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_InitTick+0x6c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f93f 	bl	8001782 <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d809      	bhi.n	8001524 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001518:	f000 f917 	bl	800174a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_InitTick+0x74>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e007      	b.n	8001534 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e004      	b.n	8001534 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e001      	b.n	8001534 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	20000164 	.word	0x20000164

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000164 	.word	0x20000164

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_Delay+0x40>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000008 	.word	0x20000008

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff47 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff5c 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffb0 	bl	80016f0 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e17f      	b.n	8001aac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8171 	beq.w	8001aa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d00b      	beq.n	80017e4 <HAL_GPIO_Init+0x48>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d8:	2b11      	cmp	r3, #17
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b12      	cmp	r3, #18
 80017e2:	d130      	bne.n	8001846 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181a:	2201      	movs	r2, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 0201 	and.w	r2, r3, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b03      	cmp	r3, #3
 8001850:	d118      	bne.n	8001884 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001858:	2201      	movs	r2, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	f003 0201 	and.w	r2, r3, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x128>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b12      	cmp	r3, #18
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	6939      	ldr	r1, [r7, #16]
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80ac 	beq.w	8001aa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	4b5e      	ldr	r3, [pc, #376]	; (8001ac8 <HAL_GPIO_Init+0x32c>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	4a5d      	ldr	r2, [pc, #372]	; (8001ac8 <HAL_GPIO_Init+0x32c>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6613      	str	r3, [r2, #96]	; 0x60
 800195a:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <HAL_GPIO_Init+0x32c>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001966:	4a59      	ldr	r2, [pc, #356]	; (8001acc <HAL_GPIO_Init+0x330>)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001990:	d025      	beq.n	80019de <HAL_GPIO_Init+0x242>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <HAL_GPIO_Init+0x334>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01f      	beq.n	80019da <HAL_GPIO_Init+0x23e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4d      	ldr	r2, [pc, #308]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x23a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_GPIO_Init+0x33c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x236>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <HAL_GPIO_Init+0x340>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x232>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x344>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x22e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_GPIO_Init+0x348>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x22a>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00c      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e00a      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019de:	2300      	movs	r3, #0
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f0:	4936      	ldr	r1, [pc, #216]	; (8001acc <HAL_GPIO_Init+0x330>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019fe:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a22:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_GPIO_Init+0x34c>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f47f ae78 	bne.w	80017ac <HAL_GPIO_Init+0x10>
  }
}
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	48000c00 	.word	0x48000c00
 8001adc:	48001000 	.word	0x48001000
 8001ae0:	48001400 	.word	0x48001400
 8001ae4:	48001800 	.word	0x48001800
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e081      	b.n	8001c32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fb5c 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e006      	b.n	8001ba4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ba2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d104      	bne.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	ea42 0103 	orr.w	r1, r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	021a      	lsls	r2, r3, #8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69d9      	ldr	r1, [r3, #28]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1a      	ldr	r2, [r3, #32]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	f040 80da 	bne.w	8001e12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2C_Master_Transmit+0x30>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e0d3      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c74:	f7ff fc7e 	bl	8001574 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2319      	movs	r3, #25
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f9e6 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0be      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d90e      	bls.n	8001ce6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	8979      	ldrh	r1, [r7, #10]
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_I2C_Master_Transmit+0x1e0>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fb48 	bl	8002374 <I2C_TransferConfig>
 8001ce4:	e06c      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_I2C_Master_Transmit+0x1e0>)
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fb37 	bl	8002374 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d06:	e05b      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	6a39      	ldr	r1, [r7, #32]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f9e3 	bl	80020d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e07b      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d034      	beq.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d130      	bne.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f975 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e04d      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2bff      	cmp	r3, #255	; 0xff
 8001d80:	d90e      	bls.n	8001da0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	22ff      	movs	r2, #255	; 0xff
 8001d86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	8979      	ldrh	r1, [r7, #10]
 8001d90:	2300      	movs	r3, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 faeb 	bl	8002374 <I2C_TransferConfig>
 8001d9e:	e00f      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	8979      	ldrh	r1, [r7, #10]
 8001db2:	2300      	movs	r3, #0
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fada 	bl	8002374 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d19e      	bne.n	8001d08 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	6a39      	ldr	r1, [r7, #32]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f9c2 	bl	8002158 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e01a      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2220      	movs	r2, #32
 8001de4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_I2C_Master_Transmit+0x1e4>)
 8001df2:	400b      	ands	r3, r1
 8001df4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	80002000 	.word	0x80002000
 8001e20:	fe00e800 	.word	0xfe00e800

08001e24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	460b      	mov	r3, r1
 8001e32:	817b      	strh	r3, [r7, #10]
 8001e34:	4613      	mov	r3, r2
 8001e36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	f040 80db 	bne.w	8001ffc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_Master_Receive+0x30>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e0d4      	b.n	8001ffe <HAL_I2C_Master_Receive+0x1da>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e5c:	f7ff fb8a 	bl	8001574 <HAL_GetTick>
 8001e60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2319      	movs	r3, #25
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f8f2 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0bf      	b.n	8001ffe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2222      	movs	r2, #34	; 0x22
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	893a      	ldrh	r2, [r7, #8]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2bff      	cmp	r3, #255	; 0xff
 8001eae:	d90e      	bls.n	8001ece <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	22ff      	movs	r2, #255	; 0xff
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HAL_I2C_Master_Receive+0x1e4>)
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa54 	bl	8002374 <I2C_TransferConfig>
 8001ecc:	e06d      	b.n	8001faa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	8979      	ldrh	r1, [r7, #10]
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_I2C_Master_Receive+0x1e4>)
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 fa43 	bl	8002374 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001eee:	e05c      	b.n	8001faa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	6a39      	ldr	r1, [r7, #32]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f96b 	bl	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e07c      	b.n	8001ffe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d034      	beq.n	8001faa <HAL_I2C_Master_Receive+0x186>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d130      	bne.n	8001faa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f880 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e04d      	b.n	8001ffe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2bff      	cmp	r3, #255	; 0xff
 8001f6a:	d90e      	bls.n	8001f8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	22ff      	movs	r2, #255	; 0xff
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f9f6 	bl	8002374 <I2C_TransferConfig>
 8001f88:	e00f      	b.n	8001faa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f9e5 	bl	8002374 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d19d      	bne.n	8001ef0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	6a39      	ldr	r1, [r7, #32]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f8cd 	bl	8002158 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e01a      	b.n	8001ffe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_I2C_Master_Receive+0x1e8>)
 8001fdc:	400b      	ands	r3, r1
 8001fde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	80002400 	.word	0x80002400
 800200c:	fe00e800 	.word	0xfe00e800

08002010 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d103      	bne.n	800202e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d007      	beq.n	800204c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	619a      	str	r2, [r3, #24]
  }
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002068:	e022      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002070:	d01e      	beq.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7ff fa7f 	bl	8001574 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e00f      	b.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	4013      	ands	r3, r2
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	429a      	cmp	r2, r3
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d0cd      	beq.n	800206a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020e4:	e02c      	b.n	8002140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f8dc 	bl	80022a8 <I2C_IsAcknowledgeFailed>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e02a      	b.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002100:	d01e      	beq.n	8002140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002102:	f7ff fa37 	bl	8001574 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d113      	bne.n	8002140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e007      	b.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b02      	cmp	r3, #2
 800214c:	d1cb      	bne.n	80020e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002164:	e028      	b.n	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f89c 	bl	80022a8 <I2C_IsAcknowledgeFailed>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e026      	b.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217a:	f7ff f9fb 	bl	8001574 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	429a      	cmp	r2, r3
 8002188:	d302      	bcc.n	8002190 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d113      	bne.n	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e007      	b.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d1cf      	bne.n	8002166 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021dc:	e055      	b.n	800228a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f860 	bl	80022a8 <I2C_IsAcknowledgeFailed>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e053      	b.n	800229a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d129      	bne.n	8002254 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d105      	bne.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e03f      	b.n	800229a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2220      	movs	r2, #32
 8002220:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800222e:	400b      	ands	r3, r1
 8002230:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e022      	b.n	800229a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7ff f98e 	bl	8001574 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e007      	b.n	800229a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d1a2      	bne.n	80021de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	fe00e800 	.word	0xfe00e800

080022a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d151      	bne.n	8002366 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c2:	e022      	b.n	800230a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ca:	d01e      	beq.n	800230a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022cc:	f7ff f952 	bl	8001574 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d302      	bcc.n	80022e2 <I2C_IsAcknowledgeFailed+0x3a>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d113      	bne.n	800230a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f043 0220 	orr.w	r2, r3, #32
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e02e      	b.n	8002368 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b20      	cmp	r3, #32
 8002316:	d1d5      	bne.n	80022c4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2210      	movs	r2, #16
 800231e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2220      	movs	r2, #32
 8002326:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fe71 	bl	8002010 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <I2C_IsAcknowledgeFailed+0xc8>)
 800233a:	400b      	ands	r3, r1
 800233c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	fe00e800 	.word	0xfe00e800

08002374 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	817b      	strh	r3, [r7, #10]
 8002382:	4613      	mov	r3, r2
 8002384:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	0d5b      	lsrs	r3, r3, #21
 8002390:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <I2C_TransferConfig+0x58>)
 8002396:	430b      	orrs	r3, r1
 8002398:	43db      	mvns	r3, r3
 800239a:	ea02 0103 	and.w	r1, r2, r3
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023a4:	7a7b      	ldrb	r3, [r7, #9]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	03ff63ff 	.word	0x03ff63ff

080023d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d138      	bne.n	8002458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e032      	b.n	800245a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b20      	cmp	r3, #32
 800247a:	d139      	bne.n	80024f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002486:	2302      	movs	r3, #2
 8002488:	e033      	b.n	80024f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2224      	movs	r2, #36	; 0x24
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_PWREx_GetVoltageRange+0x18>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40007000 	.word	0x40007000

0800251c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252a:	d130      	bne.n	800258e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002538:	d038      	beq.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2232      	movs	r2, #50	; 0x32
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0c9b      	lsrs	r3, r3, #18
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002560:	e002      	b.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3b01      	subs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002574:	d102      	bne.n	800257c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f2      	bne.n	8002562 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002588:	d110      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e00f      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d007      	beq.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40007000 	.word	0x40007000
 80025c0:	20000000 	.word	0x20000000
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e3d4      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	4ba1      	ldr	r3, [pc, #644]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e4:	4b9e      	ldr	r3, [pc, #632]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80e4 	beq.w	80027c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_RCC_OscConfig+0x4a>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	f040 808b 	bne.w	8002720 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b01      	cmp	r3, #1
 800260e:	f040 8087 	bne.w	8002720 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002612:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e3ac      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_RCC_OscConfig+0x7c>
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002642:	e005      	b.n	8002650 <HAL_RCC_OscConfig+0x88>
 8002644:	4b86      	ldr	r3, [pc, #536]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002650:	4293      	cmp	r3, r2
 8002652:	d223      	bcs.n	800269c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fd3f 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e38d      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002668:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a7c      	ldr	r2, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4977      	ldr	r1, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	4972      	ldr	r1, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 800269a:	e025      	b.n	80026e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269c:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6f      	ldr	r2, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	496a      	ldr	r1, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ba:	4b69      	ldr	r3, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	4965      	ldr	r1, [pc, #404]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fcff 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e34d      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e8:	f000 fc36 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 80026ec:	4601      	mov	r1, r0
 80026ee:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_RCC_OscConfig+0x29c>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa21 f303 	lsr.w	r3, r1, r3
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_OscConfig+0x2a0>)
 8002706:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCC_OscConfig+0x2a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fee1 	bl	80014d4 <HAL_InitTick>
 8002712:	4603      	mov	r3, r0
 8002714:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d052      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	e331      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d032      	beq.n	800278e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002734:	f7fe ff1e 	bl	8001574 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800273c:	f7fe ff1a 	bl	8001574 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e31a      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	4b44      	ldr	r3, [pc, #272]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	493b      	ldr	r1, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002778:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	4936      	ldr	r1, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	e01a      	b.n	80027c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a33      	ldr	r2, [pc, #204]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279a:	f7fe feeb 	bl	8001574 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a2:	f7fe fee7 	bl	8001574 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e2e7      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x1da>
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d074      	beq.n	80028ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x21a>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d10e      	bne.n	80027fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d064      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d160      	bne.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e2c4      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x24a>
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e01d      	b.n	800284e <HAL_RCC_OscConfig+0x286>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x26e>
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x286>
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a06      	ldr	r2, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01c      	beq.n	8002890 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fe8d 	bl	8001574 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285c:	e011      	b.n	8002882 <HAL_RCC_OscConfig+0x2ba>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	08004d44 	.word	0x08004d44
 8002868:	20000000 	.word	0x20000000
 800286c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fe80 	bl	8001574 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e280      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	4baf      	ldr	r3, [pc, #700]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x2a8>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fe70 	bl	8001574 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fe6c 	bl	8001574 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e26c      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	4ba5      	ldr	r3, [pc, #660]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x2d0>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d060      	beq.n	8002988 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x310>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d116      	bne.n	8002906 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d8:	4b99      	ldr	r3, [pc, #612]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x328>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e249      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b93      	ldr	r3, [pc, #588]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	4990      	ldr	r1, [pc, #576]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002904:	e040      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d023      	beq.n	8002956 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290e:	4b8c      	ldr	r3, [pc, #560]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a8b      	ldr	r2, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fe2b 	bl	8001574 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe fe27 	bl	8001574 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e227      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	497c      	ldr	r1, [pc, #496]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	e018      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b7a      	ldr	r3, [pc, #488]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a79      	ldr	r2, [pc, #484]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 800295c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe fe07 	bl	8001574 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe fe03 	bl	8001574 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e203      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297c:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01c      	beq.n	80029d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	4a67      	ldr	r2, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe fde2 	bl	8001574 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe fdde 	bl	8001574 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1de      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ef      	beq.n	80029b4 <HAL_RCC_OscConfig+0x3ec>
 80029d4:	e01b      	b.n	8002a0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d6:	4b5a      	ldr	r3, [pc, #360]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fdc5 	bl	8001574 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe fdc1 	bl	8001574 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1c1      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a00:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ef      	bne.n	80029ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80a6 	beq.w	8002b68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b44      	ldr	r3, [pc, #272]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	; 0x58
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d118      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a54:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a60:	f7fe fd88 	bl	8001574 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe fd84 	bl	8001574 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e184      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4d8>
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	4a2a      	ldr	r2, [pc, #168]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a9e:	e024      	b.n	8002aea <HAL_RCC_OscConfig+0x522>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d110      	bne.n	8002aca <HAL_RCC_OscConfig+0x502>
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac8:	e00f      	b.n	8002aea <HAL_RCC_OscConfig+0x522>
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	f023 0304 	bic.w	r3, r3, #4
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7fe fd3f 	bl	8001574 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fd3b 	bl	8001574 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e139      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0ed      	beq.n	8002afa <HAL_RCC_OscConfig+0x532>
 8002b1e:	e01a      	b.n	8002b56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe fd28 	bl	8001574 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b26:	e00f      	b.n	8002b48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe fd24 	bl	8001574 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d906      	bls.n	8002b48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e122      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e8      	bne.n	8002b28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	7ffb      	ldrb	r3, [r7, #31]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a8a      	ldr	r2, [pc, #552]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8108 	beq.w	8002d82 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 80d0 	bne.w	8002d1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b7c:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d130      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d127      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bbc:	2a07      	cmp	r2, #7
 8002bbe:	bf14      	ite	ne
 8002bc0:	2201      	movne	r2, #1
 8002bc2:	2200      	moveq	r2, #0
 8002bc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d113      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d06e      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d069      	beq.n	8002ccc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bf8:	4b64      	ldr	r3, [pc, #400]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b7      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c14:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c20:	f7fe fca8 	bl	8001574 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fca4 	bl	8001574 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0a4      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <HAL_RCC_OscConfig+0x7c8>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c56:	3a01      	subs	r2, #1
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c60:	0212      	lsls	r2, r2, #8
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c68:	0852      	lsrs	r2, r2, #1
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	0552      	lsls	r2, r2, #21
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c74:	0852      	lsrs	r2, r2, #1
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0652      	lsls	r2, r2, #25
 8002c7a:	4311      	orrs	r1, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c80:	0912      	lsrs	r2, r2, #4
 8002c82:	0452      	lsls	r2, r2, #17
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4941      	ldr	r1, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3e      	ldr	r2, [pc, #248]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c98:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca4:	f7fe fc66 	bl	8001574 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fc62 	bl	8001574 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e062      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cca:	e05a      	b.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e059      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d152      	bne.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf4:	f7fe fc3e 	bl	8001574 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe fc3a 	bl	8001574 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e03a      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x734>
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d02d      	beq.n	8002d7e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d40:	f023 0303 	bic.w	r3, r3, #3
 8002d44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fc0d 	bl	8001574 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe fc09 	bl	8001574 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e009      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x796>
 8002d7c:	e001      	b.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	f99d808c 	.word	0xf99d808c

08002d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0c8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b66      	ldr	r3, [pc, #408]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4961      	ldr	r1, [pc, #388]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b0      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d04c      	beq.n	8002e7e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e09e      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d115      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e092      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e086      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2c:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e07e      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e3c:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 0203 	bic.w	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	493f      	ldr	r1, [pc, #252]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fb91 	bl	8001574 <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e56:	f7fe fb8d 	bl	8001574 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e066      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 020c 	and.w	r2, r3, #12
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d1eb      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	492c      	ldr	r1, [pc, #176]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d210      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4924      	ldr	r1, [pc, #144]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e036      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4918      	ldr	r1, [pc, #96]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4910      	ldr	r1, [pc, #64]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f0a:	f000 f825 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4601      	mov	r1, r0
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	4a0c      	ldr	r2, [pc, #48]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	5cd3      	ldrb	r3, [r2, r3]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	fa21 f303 	lsr.w	r3, r1, r3
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fad0 	bl	80014d4 <HAL_InitTick>
 8002f34:	4603      	mov	r3, r0
 8002f36:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08004d44 	.word	0x08004d44
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f70:	4b3a      	ldr	r3, [pc, #232]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x34>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d11e      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f8c:	4b33      	ldr	r3, [pc, #204]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e005      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fb4:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d133      	bne.n	800304e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d002      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xa4>
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0xaa>
 8002ffa:	e005      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ffe:	617b      	str	r3, [r7, #20]
      break;
 8003000:	e005      	b.n	800300e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_GetSysClockFreq+0x110>)
 8003004:	617b      	str	r3, [r7, #20]
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	617b      	str	r3, [r7, #20]
      break;
 800300c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	3301      	adds	r3, #1
 800301a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	fb02 f203 	mul.w	r2, r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_GetSysClockFreq+0x104>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0e5b      	lsrs	r3, r3, #25
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800304e:	69bb      	ldr	r3, [r7, #24]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3724      	adds	r7, #36	; 0x24
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40021000 	.word	0x40021000
 8003060:	08004d5c 	.word	0x08004d5c
 8003064:	00f42400 	.word	0x00f42400
 8003068:	007a1200 	.word	0x007a1200

0800306c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCC_GetHCLKFreq+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000000 	.word	0x20000000

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003088:	f7ff fff0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800308c:	4601      	mov	r1, r0
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08004d54 	.word	0x08004d54

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030b4:	f7ff ffda 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030b8:	4601      	mov	r1, r0
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0adb      	lsrs	r3, r3, #11
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08004d54 	.word	0x08004d54

080030dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030f4:	f7ff fa04 	bl	8002500 <HAL_PWREx_GetVoltageRange>
 80030f8:	6178      	str	r0, [r7, #20]
 80030fa:	e014      	b.n	8003126 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030fc:	4b25      	ldr	r3, [pc, #148]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	4a24      	ldr	r2, [pc, #144]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6593      	str	r3, [r2, #88]	; 0x58
 8003108:	4b22      	ldr	r3, [pc, #136]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003114:	f7ff f9f4 	bl	8002500 <HAL_PWREx_GetVoltageRange>
 8003118:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003124:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d10b      	bne.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d919      	bls.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2ba0      	cmp	r3, #160	; 0xa0
 8003138:	d902      	bls.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800313a:	2302      	movs	r3, #2
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	e013      	b.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e010      	b.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d902      	bls.n	8003152 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800314c:	2303      	movs	r3, #3
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	e00a      	b.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d102      	bne.n	800315e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003158:	2302      	movs	r3, #2
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	e004      	b.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b70      	cmp	r3, #112	; 0x70
 8003162:	d101      	bne.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003164:	2301      	movs	r3, #1
 8003166:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 0207 	bic.w	r2, r3, #7
 8003170:	4909      	ldr	r1, [pc, #36]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	429a      	cmp	r2, r3
 8003184:	d001      	beq.n	800318a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	40022000 	.word	0x40022000

0800319c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031a4:	2300      	movs	r3, #0
 80031a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031a8:	2300      	movs	r3, #0
 80031aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d03f      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c0:	d01c      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80031c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c6:	d802      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80031cc:	e01f      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80031ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031d2:	d003      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031d8:	d01c      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80031da:	e018      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031dc:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a84      	ldr	r2, [pc, #528]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e8:	e015      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fab9 	bl	8003768 <RCCEx_PLLSAI1_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031fa:	e00c      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3320      	adds	r3, #32
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fba0 	bl	8003948 <RCCEx_PLLSAI2_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800320c:	e003      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	74fb      	strb	r3, [r7, #19]
      break;
 8003212:	e000      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800321c:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322a:	4972      	ldr	r1, [pc, #456]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003232:	e001      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03f      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d01c      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800324e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003252:	d802      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00e      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003258:	e01f      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800325a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800325e:	d003      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003260:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003264:	d01c      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003266:	e018      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003268:	4b62      	ldr	r3, [pc, #392]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a61      	ldr	r2, [pc, #388]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800326e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003272:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003274:	e015      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fa73 	bl	8003768 <RCCEx_PLLSAI1_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003286:	e00c      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3320      	adds	r3, #32
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fb5a 	bl	8003948 <RCCEx_PLLSAI2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	74fb      	strb	r3, [r7, #19]
      break;
 800329e:	e000      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032a8:	4b52      	ldr	r3, [pc, #328]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b6:	494f      	ldr	r1, [pc, #316]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032be:	e001      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a0 	beq.w	8003412 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ec:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	4a40      	ldr	r2, [pc, #256]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6593      	str	r3, [r2, #88]	; 0x58
 80032f8:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003304:	2301      	movs	r3, #1
 8003306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3a      	ldr	r2, [pc, #232]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003314:	f7fe f92e 	bl	8001574 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800331a:	e009      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331c:	f7fe f92a 	bl	8001574 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	74fb      	strb	r3, [r7, #19]
        break;
 800332e:	e005      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ef      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d15c      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01f      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	429a      	cmp	r2, r3
 800335e:	d019      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800338c:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fe f8e9 	bl	8001574 <HAL_GetTick>
 80033a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a4:	e00b      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe f8e5 	bl	8001574 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d902      	bls.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	74fb      	strb	r3, [r7, #19]
            break;
 80033bc:	e006      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ec      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e2:	4904      	ldr	r1, [pc, #16]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033ea:	e009      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	74bb      	strb	r3, [r7, #18]
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003400:	7c7b      	ldrb	r3, [r7, #17]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d105      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003406:	4b9e      	ldr	r3, [pc, #632]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	4a9d      	ldr	r2, [pc, #628]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800341e:	4b98      	ldr	r3, [pc, #608]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 0203 	bic.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	4994      	ldr	r1, [pc, #592]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003440:	4b8f      	ldr	r3, [pc, #572]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 020c 	bic.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	498c      	ldr	r1, [pc, #560]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003462:	4b87      	ldr	r3, [pc, #540]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	4983      	ldr	r1, [pc, #524]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003484:	4b7e      	ldr	r3, [pc, #504]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	497b      	ldr	r1, [pc, #492]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034a6:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	4972      	ldr	r1, [pc, #456]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034c8:	4b6d      	ldr	r3, [pc, #436]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	496a      	ldr	r1, [pc, #424]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ea:	4b65      	ldr	r3, [pc, #404]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	4961      	ldr	r1, [pc, #388]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800350c:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351a:	4959      	ldr	r1, [pc, #356]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	4950      	ldr	r1, [pc, #320]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003550:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	4948      	ldr	r1, [pc, #288]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003572:	4b43      	ldr	r3, [pc, #268]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	493f      	ldr	r1, [pc, #252]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d028      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a2:	4937      	ldr	r1, [pc, #220]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b2:	d106      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b4:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035be:	60d3      	str	r3, [r2, #12]
 80035c0:	e011      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ca:	d10c      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f8c8 	bl	8003768 <RCCEx_PLLSAI1_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d028      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	491f      	ldr	r1, [pc, #124]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003610:	d106      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800361c:	60d3      	str	r3, [r2, #12]
 800361e:	e011      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003628:	d10c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f899 	bl	8003768 <RCCEx_PLLSAI1_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d02b      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366e:	d109      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a02      	ldr	r2, [pc, #8]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e014      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f867 	bl	8003768 <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d02f      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c2:	4928      	ldr	r1, [pc, #160]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3304      	adds	r3, #4
 80036d8:	2102      	movs	r1, #2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f844 	bl	8003768 <RCCEx_PLLSAI1_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d014      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	74bb      	strb	r3, [r7, #18]
 80036ee:	e011      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3320      	adds	r3, #32
 80036fe:	2102      	movs	r1, #2
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f921 	bl	8003948 <RCCEx_PLLSAI2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372e:	490d      	ldr	r1, [pc, #52]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003752:	4904      	ldr	r1, [pc, #16]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800375a:	7cbb      	ldrb	r3, [r7, #18]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000

08003768 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003776:	4b73      	ldr	r3, [pc, #460]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d018      	beq.n	80037b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003782:	4b70      	ldr	r3, [pc, #448]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0203 	and.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d10d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
       ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800379a:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
       ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d044      	beq.n	8003838 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e041      	b.n	8003838 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d00c      	beq.n	80037d6 <RCCEx_PLLSAI1_Config+0x6e>
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d013      	beq.n	80037e8 <RCCEx_PLLSAI1_Config+0x80>
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d120      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037c4:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d11d      	bne.n	800380c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d4:	e01a      	b.n	800380c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e6:	e013      	b.n	8003810 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037e8:	4b56      	ldr	r3, [pc, #344]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10f      	bne.n	8003814 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037f4:	4b53      	ldr	r3, [pc, #332]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003804:	e006      	b.n	8003814 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      break;
 800380a:	e004      	b.n	8003816 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800380c:	bf00      	nop
 800380e:	e002      	b.n	8003816 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003814:	bf00      	nop
    }

    if(status == HAL_OK)
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10d      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800381c:	4b49      	ldr	r3, [pc, #292]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	3b01      	subs	r3, #1
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	430b      	orrs	r3, r1
 8003832:	4944      	ldr	r1, [pc, #272]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d17d      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800383e:	4b41      	ldr	r3, [pc, #260]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003844:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384a:	f7fd fe93 	bl	8001574 <HAL_GetTick>
 800384e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003850:	e009      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003852:	f7fd fe8f 	bl	8001574 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d902      	bls.n	8003866 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	73fb      	strb	r3, [r7, #15]
        break;
 8003864:	e005      	b.n	8003872 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003866:	4b37      	ldr	r3, [pc, #220]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ef      	bne.n	8003852 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d160      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d111      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6892      	ldr	r2, [r2, #8]
 800388e:	0211      	lsls	r1, r2, #8
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68d2      	ldr	r2, [r2, #12]
 8003894:	0912      	lsrs	r2, r2, #4
 8003896:	0452      	lsls	r2, r2, #17
 8003898:	430a      	orrs	r2, r1
 800389a:	492a      	ldr	r1, [pc, #168]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	610b      	str	r3, [r1, #16]
 80038a0:	e027      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d112      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a8:	4b26      	ldr	r3, [pc, #152]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6892      	ldr	r2, [r2, #8]
 80038b8:	0211      	lsls	r1, r2, #8
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6912      	ldr	r2, [r2, #16]
 80038be:	0852      	lsrs	r2, r2, #1
 80038c0:	3a01      	subs	r2, #1
 80038c2:	0552      	lsls	r2, r2, #21
 80038c4:	430a      	orrs	r2, r1
 80038c6:	491f      	ldr	r1, [pc, #124]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	610b      	str	r3, [r1, #16]
 80038cc:	e011      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6892      	ldr	r2, [r2, #8]
 80038de:	0211      	lsls	r1, r2, #8
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6952      	ldr	r2, [r2, #20]
 80038e4:	0852      	lsrs	r2, r2, #1
 80038e6:	3a01      	subs	r2, #1
 80038e8:	0652      	lsls	r2, r2, #25
 80038ea:	430a      	orrs	r2, r1
 80038ec:	4915      	ldr	r1, [pc, #84]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd fe39 	bl	8001574 <HAL_GetTick>
 8003902:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003904:	e009      	b.n	800391a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003906:	f7fd fe35 	bl	8001574 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d902      	bls.n	800391a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	73fb      	strb	r3, [r7, #15]
          break;
 8003918:	e005      	b.n	8003926 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ef      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000

08003948 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003956:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d018      	beq.n	8003994 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003962:	4b65      	ldr	r3, [pc, #404]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0203 	and.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d10d      	bne.n	800398e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
       ||
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800397a:	4b5f      	ldr	r3, [pc, #380]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
       ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d044      	beq.n	8003a18 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e041      	b.n	8003a18 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d00c      	beq.n	80039b6 <RCCEx_PLLSAI2_Config+0x6e>
 800399c:	2b03      	cmp	r3, #3
 800399e:	d013      	beq.n	80039c8 <RCCEx_PLLSAI2_Config+0x80>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d120      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039a4:	4b54      	ldr	r3, [pc, #336]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11d      	bne.n	80039ec <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e01a      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b6:	4b50      	ldr	r3, [pc, #320]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c6:	e013      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039c8:	4b4b      	ldr	r3, [pc, #300]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10f      	bne.n	80039f4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039d4:	4b48      	ldr	r3, [pc, #288]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039e4:	e006      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ea:	e004      	b.n	80039f6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039ec:	bf00      	nop
 80039ee:	e002      	b.n	80039f6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039fc:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	430b      	orrs	r3, r1
 8003a12:	4939      	ldr	r1, [pc, #228]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d167      	bne.n	8003aee <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a1e:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a35      	ldr	r2, [pc, #212]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2a:	f7fd fda3 	bl	8001574 <HAL_GetTick>
 8003a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a30:	e009      	b.n	8003a46 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a32:	f7fd fd9f 	bl	8001574 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d902      	bls.n	8003a46 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	73fb      	strb	r3, [r7, #15]
        break;
 8003a44:	e005      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ef      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d14a      	bne.n	8003aee <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d111      	bne.n	8003a82 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6892      	ldr	r2, [r2, #8]
 8003a6e:	0211      	lsls	r1, r2, #8
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68d2      	ldr	r2, [r2, #12]
 8003a74:	0912      	lsrs	r2, r2, #4
 8003a76:	0452      	lsls	r2, r2, #17
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	491f      	ldr	r1, [pc, #124]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	614b      	str	r3, [r1, #20]
 8003a80:	e011      	b.n	8003aa6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6892      	ldr	r2, [r2, #8]
 8003a92:	0211      	lsls	r1, r2, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6912      	ldr	r2, [r2, #16]
 8003a98:	0852      	lsrs	r2, r2, #1
 8003a9a:	3a01      	subs	r2, #1
 8003a9c:	0652      	lsls	r2, r2, #25
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	4915      	ldr	r1, [pc, #84]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fd fd5f 	bl	8001574 <HAL_GetTick>
 8003ab6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab8:	e009      	b.n	8003ace <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aba:	f7fd fd5b 	bl	8001574 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d902      	bls.n	8003ace <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	73fb      	strb	r3, [r7, #15]
          break;
 8003acc:	e005      	b.n	8003ada <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ef      	beq.n	8003aba <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	4903      	ldr	r1, [pc, #12]	; (8003af8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000

08003afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e040      	b.n	8003b90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd fbb2 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	; 0x24
 8003b28:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8c0 	bl	8003cc0 <UART_SetConfig>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e022      	b.n	8003b90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb3e 	bl	80041d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fbc5 	bl	8004318 <UART_CheckIdleState>
 8003b8e:	4603      	mov	r3, r0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	f040 8081 	bne.w	8003cb4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_Transmit+0x26>
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e079      	b.n	8003cb6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_UART_Transmit+0x38>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e072      	b.n	8003cb6 <HAL_UART_Transmit+0x11e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2221      	movs	r2, #33	; 0x21
 8003be2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003be4:	f7fd fcc6 	bl	8001574 <HAL_GetTick>
 8003be8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c02:	d108      	bne.n	8003c16 <HAL_UART_Transmit+0x7e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	e003      	b.n	8003c1e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003c26:	e02d      	b.n	8003c84 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fbb5 	bl	80043a2 <UART_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e039      	b.n	8003cb6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	881a      	ldrh	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c54:	b292      	uxth	r2, r2
 8003c56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e008      	b.n	8003c72 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	b292      	uxth	r2, r2
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1cb      	bne.n	8003c28 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2200      	movs	r2, #0
 8003c98:	2140      	movs	r1, #64	; 0x40
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fb81 	bl	80043a2 <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e005      	b.n	8003cb6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003cc4:	b088      	sub	sp, #32
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4bac      	ldr	r3, [pc, #688]	; (8003fa0 <UART_SetConfig+0x2e0>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	69f9      	ldr	r1, [r7, #28]
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4aa2      	ldr	r2, [pc, #648]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a99      	ldr	r2, [pc, #612]	; (8003fa8 <UART_SetConfig+0x2e8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d121      	bne.n	8003d8c <UART_SetConfig+0xcc>
 8003d48:	4b98      	ldr	r3, [pc, #608]	; (8003fac <UART_SetConfig+0x2ec>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d816      	bhi.n	8003d84 <UART_SetConfig+0xc4>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x9c>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d79 	.word	0x08003d79
 8003d64:	08003d73 	.word	0x08003d73
 8003d68:	08003d7f 	.word	0x08003d7f
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	76fb      	strb	r3, [r7, #27]
 8003d70:	e0e8      	b.n	8003f44 <UART_SetConfig+0x284>
 8003d72:	2302      	movs	r3, #2
 8003d74:	76fb      	strb	r3, [r7, #27]
 8003d76:	e0e5      	b.n	8003f44 <UART_SetConfig+0x284>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	76fb      	strb	r3, [r7, #27]
 8003d7c:	e0e2      	b.n	8003f44 <UART_SetConfig+0x284>
 8003d7e:	2308      	movs	r3, #8
 8003d80:	76fb      	strb	r3, [r7, #27]
 8003d82:	e0df      	b.n	8003f44 <UART_SetConfig+0x284>
 8003d84:	2310      	movs	r3, #16
 8003d86:	76fb      	strb	r3, [r7, #27]
 8003d88:	bf00      	nop
 8003d8a:	e0db      	b.n	8003f44 <UART_SetConfig+0x284>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a87      	ldr	r2, [pc, #540]	; (8003fb0 <UART_SetConfig+0x2f0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d134      	bne.n	8003e00 <UART_SetConfig+0x140>
 8003d96:	4b85      	ldr	r3, [pc, #532]	; (8003fac <UART_SetConfig+0x2ec>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d829      	bhi.n	8003df8 <UART_SetConfig+0x138>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <UART_SetConfig+0xec>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003df9 	.word	0x08003df9
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003df9 	.word	0x08003df9
 8003dbc:	08003ded 	.word	0x08003ded
 8003dc0:	08003df9 	.word	0x08003df9
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003df9 	.word	0x08003df9
 8003dcc:	08003de7 	.word	0x08003de7
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003df9 	.word	0x08003df9
 8003ddc:	08003df3 	.word	0x08003df3
 8003de0:	2300      	movs	r3, #0
 8003de2:	76fb      	strb	r3, [r7, #27]
 8003de4:	e0ae      	b.n	8003f44 <UART_SetConfig+0x284>
 8003de6:	2302      	movs	r3, #2
 8003de8:	76fb      	strb	r3, [r7, #27]
 8003dea:	e0ab      	b.n	8003f44 <UART_SetConfig+0x284>
 8003dec:	2304      	movs	r3, #4
 8003dee:	76fb      	strb	r3, [r7, #27]
 8003df0:	e0a8      	b.n	8003f44 <UART_SetConfig+0x284>
 8003df2:	2308      	movs	r3, #8
 8003df4:	76fb      	strb	r3, [r7, #27]
 8003df6:	e0a5      	b.n	8003f44 <UART_SetConfig+0x284>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	76fb      	strb	r3, [r7, #27]
 8003dfc:	bf00      	nop
 8003dfe:	e0a1      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6b      	ldr	r2, [pc, #428]	; (8003fb4 <UART_SetConfig+0x2f4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d120      	bne.n	8003e4c <UART_SetConfig+0x18c>
 8003e0a:	4b68      	ldr	r3, [pc, #416]	; (8003fac <UART_SetConfig+0x2ec>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d00f      	beq.n	8003e38 <UART_SetConfig+0x178>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d802      	bhi.n	8003e22 <UART_SetConfig+0x162>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <UART_SetConfig+0x16c>
 8003e20:	e010      	b.n	8003e44 <UART_SetConfig+0x184>
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d005      	beq.n	8003e32 <UART_SetConfig+0x172>
 8003e26:	2b30      	cmp	r3, #48	; 0x30
 8003e28:	d009      	beq.n	8003e3e <UART_SetConfig+0x17e>
 8003e2a:	e00b      	b.n	8003e44 <UART_SetConfig+0x184>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e088      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e32:	2302      	movs	r3, #2
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e085      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	e082      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	76fb      	strb	r3, [r7, #27]
 8003e42:	e07f      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e44:	2310      	movs	r3, #16
 8003e46:	76fb      	strb	r3, [r7, #27]
 8003e48:	bf00      	nop
 8003e4a:	e07b      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a59      	ldr	r2, [pc, #356]	; (8003fb8 <UART_SetConfig+0x2f8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d120      	bne.n	8003e98 <UART_SetConfig+0x1d8>
 8003e56:	4b55      	ldr	r3, [pc, #340]	; (8003fac <UART_SetConfig+0x2ec>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d00f      	beq.n	8003e84 <UART_SetConfig+0x1c4>
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d802      	bhi.n	8003e6e <UART_SetConfig+0x1ae>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <UART_SetConfig+0x1b8>
 8003e6c:	e010      	b.n	8003e90 <UART_SetConfig+0x1d0>
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d005      	beq.n	8003e7e <UART_SetConfig+0x1be>
 8003e72:	2bc0      	cmp	r3, #192	; 0xc0
 8003e74:	d009      	beq.n	8003e8a <UART_SetConfig+0x1ca>
 8003e76:	e00b      	b.n	8003e90 <UART_SetConfig+0x1d0>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e062      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e05f      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e84:	2304      	movs	r3, #4
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	e05c      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	76fb      	strb	r3, [r7, #27]
 8003e8e:	e059      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e90:	2310      	movs	r3, #16
 8003e92:	76fb      	strb	r3, [r7, #27]
 8003e94:	bf00      	nop
 8003e96:	e055      	b.n	8003f44 <UART_SetConfig+0x284>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a47      	ldr	r2, [pc, #284]	; (8003fbc <UART_SetConfig+0x2fc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d124      	bne.n	8003eec <UART_SetConfig+0x22c>
 8003ea2:	4b42      	ldr	r3, [pc, #264]	; (8003fac <UART_SetConfig+0x2ec>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb0:	d012      	beq.n	8003ed8 <UART_SetConfig+0x218>
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d802      	bhi.n	8003ebe <UART_SetConfig+0x1fe>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <UART_SetConfig+0x20c>
 8003ebc:	e012      	b.n	8003ee4 <UART_SetConfig+0x224>
 8003ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec2:	d006      	beq.n	8003ed2 <UART_SetConfig+0x212>
 8003ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec8:	d009      	beq.n	8003ede <UART_SetConfig+0x21e>
 8003eca:	e00b      	b.n	8003ee4 <UART_SetConfig+0x224>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e038      	b.n	8003f44 <UART_SetConfig+0x284>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	76fb      	strb	r3, [r7, #27]
 8003ed6:	e035      	b.n	8003f44 <UART_SetConfig+0x284>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	76fb      	strb	r3, [r7, #27]
 8003edc:	e032      	b.n	8003f44 <UART_SetConfig+0x284>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	76fb      	strb	r3, [r7, #27]
 8003ee2:	e02f      	b.n	8003f44 <UART_SetConfig+0x284>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	76fb      	strb	r3, [r7, #27]
 8003ee8:	bf00      	nop
 8003eea:	e02b      	b.n	8003f44 <UART_SetConfig+0x284>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d124      	bne.n	8003f40 <UART_SetConfig+0x280>
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <UART_SetConfig+0x2ec>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d012      	beq.n	8003f2c <UART_SetConfig+0x26c>
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0a:	d802      	bhi.n	8003f12 <UART_SetConfig+0x252>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <UART_SetConfig+0x260>
 8003f10:	e012      	b.n	8003f38 <UART_SetConfig+0x278>
 8003f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f16:	d006      	beq.n	8003f26 <UART_SetConfig+0x266>
 8003f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f1c:	d009      	beq.n	8003f32 <UART_SetConfig+0x272>
 8003f1e:	e00b      	b.n	8003f38 <UART_SetConfig+0x278>
 8003f20:	2300      	movs	r3, #0
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	e00e      	b.n	8003f44 <UART_SetConfig+0x284>
 8003f26:	2302      	movs	r3, #2
 8003f28:	76fb      	strb	r3, [r7, #27]
 8003f2a:	e00b      	b.n	8003f44 <UART_SetConfig+0x284>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	e008      	b.n	8003f44 <UART_SetConfig+0x284>
 8003f32:	2308      	movs	r3, #8
 8003f34:	76fb      	strb	r3, [r7, #27]
 8003f36:	e005      	b.n	8003f44 <UART_SetConfig+0x284>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	bf00      	nop
 8003f3e:	e001      	b.n	8003f44 <UART_SetConfig+0x284>
 8003f40:	2310      	movs	r3, #16
 8003f42:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <UART_SetConfig+0x2e4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	f040 8087 	bne.w	800405e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f50:	7efb      	ldrb	r3, [r7, #27]
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d836      	bhi.n	8003fc4 <UART_SetConfig+0x304>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x29c>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003fc5 	.word	0x08003fc5
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003fc5 	.word	0x08003fc5
 8003f6c:	08003f8f 	.word	0x08003f8f
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	08003fc5 	.word	0x08003fc5
 8003f78:	08003fc5 	.word	0x08003fc5
 8003f7c:	08003f97 	.word	0x08003f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7ff f880 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8003f84:	6178      	str	r0, [r7, #20]
        break;
 8003f86:	e022      	b.n	8003fce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <UART_SetConfig+0x300>)
 8003f8a:	617b      	str	r3, [r7, #20]
        break;
 8003f8c:	e01f      	b.n	8003fce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8e:	f7fe ffe3 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8003f92:	6178      	str	r0, [r7, #20]
        break;
 8003f94:	e01b      	b.n	8003fce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9a:	617b      	str	r3, [r7, #20]
        break;
 8003f9c:	e017      	b.n	8003fce <UART_SetConfig+0x30e>
 8003f9e:	bf00      	nop
 8003fa0:	efff69f3 	.word	0xefff69f3
 8003fa4:	40008000 	.word	0x40008000
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40004400 	.word	0x40004400
 8003fb4:	40004800 	.word	0x40004800
 8003fb8:	40004c00 	.word	0x40004c00
 8003fbc:	40005000 	.word	0x40005000
 8003fc0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	76bb      	strb	r3, [r7, #26]
        break;
 8003fcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80f1 	beq.w	80041b8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d305      	bcc.n	8003ff2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d902      	bls.n	8003ff8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	76bb      	strb	r3, [r7, #26]
 8003ff6:	e0df      	b.n	80041b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	f04f 0400 	mov.w	r4, #0
 8004008:	0214      	lsls	r4, r2, #8
 800400a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800400e:	020b      	lsls	r3, r1, #8
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6852      	ldr	r2, [r2, #4]
 8004014:	0852      	lsrs	r2, r2, #1
 8004016:	4611      	mov	r1, r2
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	eb13 0b01 	adds.w	fp, r3, r1
 8004020:	eb44 0c02 	adc.w	ip, r4, r2
 8004024:	4658      	mov	r0, fp
 8004026:	4661      	mov	r1, ip
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f04f 0400 	mov.w	r4, #0
 8004030:	461a      	mov	r2, r3
 8004032:	4623      	mov	r3, r4
 8004034:	f7fc fd42 	bl	8000abc <__aeabi_uldivmod>
 8004038:	4603      	mov	r3, r0
 800403a:	460c      	mov	r4, r1
 800403c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004044:	d308      	bcc.n	8004058 <UART_SetConfig+0x398>
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404c:	d204      	bcs.n	8004058 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e0af      	b.n	80041b8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	76bb      	strb	r3, [r7, #26]
 800405c:	e0ac      	b.n	80041b8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004066:	d15b      	bne.n	8004120 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004068:	7efb      	ldrb	r3, [r7, #27]
 800406a:	2b08      	cmp	r3, #8
 800406c:	d827      	bhi.n	80040be <UART_SetConfig+0x3fe>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x3b4>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe fff4 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 800409c:	6178      	str	r0, [r7, #20]
        break;
 800409e:	e013      	b.n	80040c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7ff f806 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 80040a4:	6178      	str	r0, [r7, #20]
        break;
 80040a6:	e00f      	b.n	80040c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b49      	ldr	r3, [pc, #292]	; (80041d0 <UART_SetConfig+0x510>)
 80040aa:	617b      	str	r3, [r7, #20]
        break;
 80040ac:	e00c      	b.n	80040c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe ff53 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 80040b2:	6178      	str	r0, [r7, #20]
        break;
 80040b4:	e008      	b.n	80040c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ba:	617b      	str	r3, [r7, #20]
        break;
 80040bc:	e004      	b.n	80040c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	76bb      	strb	r3, [r7, #26]
        break;
 80040c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d074      	beq.n	80041b8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005a      	lsls	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	d916      	bls.n	800411a <UART_SetConfig+0x45a>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d212      	bcs.n	800411a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f023 030f 	bic.w	r3, r3, #15
 80040fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	b29a      	uxth	r2, r3
 800410a:	89fb      	ldrh	r3, [r7, #14]
 800410c:	4313      	orrs	r3, r2
 800410e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	89fa      	ldrh	r2, [r7, #14]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	e04e      	b.n	80041b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	76bb      	strb	r3, [r7, #26]
 800411e:	e04b      	b.n	80041b8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004120:	7efb      	ldrb	r3, [r7, #27]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d827      	bhi.n	8004176 <UART_SetConfig+0x4b6>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <UART_SetConfig+0x46c>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004151 	.word	0x08004151
 8004130:	08004159 	.word	0x08004159
 8004134:	08004161 	.word	0x08004161
 8004138:	08004177 	.word	0x08004177
 800413c:	08004167 	.word	0x08004167
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
 800414c:	0800416f 	.word	0x0800416f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fe ff98 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8004154:	6178      	str	r0, [r7, #20]
        break;
 8004156:	e013      	b.n	8004180 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7fe ffaa 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 800415c:	6178      	str	r0, [r7, #20]
        break;
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <UART_SetConfig+0x510>)
 8004162:	617b      	str	r3, [r7, #20]
        break;
 8004164:	e00c      	b.n	8004180 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fe fef7 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 800416a:	6178      	str	r0, [r7, #20]
        break;
 800416c:	e008      	b.n	8004180 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004172:	617b      	str	r3, [r7, #20]
        break;
 8004174:	e004      	b.n	8004180 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	76bb      	strb	r3, [r7, #26]
        break;
 800417e:	bf00      	nop
    }

    if (pclk != 0U)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085a      	lsrs	r2, r3, #1
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	441a      	add	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	d908      	bls.n	80041b4 <UART_SetConfig+0x4f4>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d204      	bcs.n	80041b4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	e001      	b.n	80041b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80041c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80041d0:	00f42400 	.word	0x00f42400

080041d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01a      	beq.n	80042ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d2:	d10a      	bne.n	80042ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af02      	add	r7, sp, #8
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004326:	f7fd f925 	bl	8001574 <HAL_GetTick>
 800432a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d10e      	bne.n	8004358 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f82a 	bl	80043a2 <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e020      	b.n	800439a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d10e      	bne.n	8004384 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004366:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f814 	bl	80043a2 <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e00a      	b.n	800439a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b2:	e05d      	b.n	8004470 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ba:	d059      	beq.n	8004470 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043bc:	f7fd f8da 	bl	8001574 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d302      	bcc.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11b      	bne.n	800440a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e042      	b.n	8004490 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02b      	beq.n	8004470 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004426:	d123      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004430:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004440:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e00f      	b.n	8004490 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	429a      	cmp	r2, r3
 800448c:	d092      	beq.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <__errno>:
 8004498:	4b01      	ldr	r3, [pc, #4]	; (80044a0 <__errno+0x8>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	2000000c 	.word	0x2000000c

080044a4 <__libc_init_array>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4e0d      	ldr	r6, [pc, #52]	; (80044dc <__libc_init_array+0x38>)
 80044a8:	4c0d      	ldr	r4, [pc, #52]	; (80044e0 <__libc_init_array+0x3c>)
 80044aa:	1ba4      	subs	r4, r4, r6
 80044ac:	10a4      	asrs	r4, r4, #2
 80044ae:	2500      	movs	r5, #0
 80044b0:	42a5      	cmp	r5, r4
 80044b2:	d109      	bne.n	80044c8 <__libc_init_array+0x24>
 80044b4:	4e0b      	ldr	r6, [pc, #44]	; (80044e4 <__libc_init_array+0x40>)
 80044b6:	4c0c      	ldr	r4, [pc, #48]	; (80044e8 <__libc_init_array+0x44>)
 80044b8:	f000 fc26 	bl	8004d08 <_init>
 80044bc:	1ba4      	subs	r4, r4, r6
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	2500      	movs	r5, #0
 80044c2:	42a5      	cmp	r5, r4
 80044c4:	d105      	bne.n	80044d2 <__libc_init_array+0x2e>
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044cc:	4798      	blx	r3
 80044ce:	3501      	adds	r5, #1
 80044d0:	e7ee      	b.n	80044b0 <__libc_init_array+0xc>
 80044d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d6:	4798      	blx	r3
 80044d8:	3501      	adds	r5, #1
 80044da:	e7f2      	b.n	80044c2 <__libc_init_array+0x1e>
 80044dc:	08004dc8 	.word	0x08004dc8
 80044e0:	08004dc8 	.word	0x08004dc8
 80044e4:	08004dc8 	.word	0x08004dc8
 80044e8:	08004dcc 	.word	0x08004dcc

080044ec <memset>:
 80044ec:	4402      	add	r2, r0
 80044ee:	4603      	mov	r3, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	f803 1b01 	strb.w	r1, [r3], #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <siprintf>:
 80044fc:	b40e      	push	{r1, r2, r3}
 80044fe:	b500      	push	{lr}
 8004500:	b09c      	sub	sp, #112	; 0x70
 8004502:	ab1d      	add	r3, sp, #116	; 0x74
 8004504:	9002      	str	r0, [sp, #8]
 8004506:	9006      	str	r0, [sp, #24]
 8004508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800450c:	4809      	ldr	r0, [pc, #36]	; (8004534 <siprintf+0x38>)
 800450e:	9107      	str	r1, [sp, #28]
 8004510:	9104      	str	r1, [sp, #16]
 8004512:	4909      	ldr	r1, [pc, #36]	; (8004538 <siprintf+0x3c>)
 8004514:	f853 2b04 	ldr.w	r2, [r3], #4
 8004518:	9105      	str	r1, [sp, #20]
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	a902      	add	r1, sp, #8
 8004520:	f000 f866 	bl	80045f0 <_svfiprintf_r>
 8004524:	9b02      	ldr	r3, [sp, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	b01c      	add	sp, #112	; 0x70
 800452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004530:	b003      	add	sp, #12
 8004532:	4770      	bx	lr
 8004534:	2000000c 	.word	0x2000000c
 8004538:	ffff0208 	.word	0xffff0208

0800453c <__ssputs_r>:
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	688e      	ldr	r6, [r1, #8]
 8004542:	429e      	cmp	r6, r3
 8004544:	4682      	mov	sl, r0
 8004546:	460c      	mov	r4, r1
 8004548:	4690      	mov	r8, r2
 800454a:	4699      	mov	r9, r3
 800454c:	d837      	bhi.n	80045be <__ssputs_r+0x82>
 800454e:	898a      	ldrh	r2, [r1, #12]
 8004550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004554:	d031      	beq.n	80045ba <__ssputs_r+0x7e>
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	6909      	ldr	r1, [r1, #16]
 800455a:	1a6f      	subs	r7, r5, r1
 800455c:	6965      	ldr	r5, [r4, #20]
 800455e:	2302      	movs	r3, #2
 8004560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004564:	fb95 f5f3 	sdiv	r5, r5, r3
 8004568:	f109 0301 	add.w	r3, r9, #1
 800456c:	443b      	add	r3, r7
 800456e:	429d      	cmp	r5, r3
 8004570:	bf38      	it	cc
 8004572:	461d      	movcc	r5, r3
 8004574:	0553      	lsls	r3, r2, #21
 8004576:	d530      	bpl.n	80045da <__ssputs_r+0x9e>
 8004578:	4629      	mov	r1, r5
 800457a:	f000 fb2b 	bl	8004bd4 <_malloc_r>
 800457e:	4606      	mov	r6, r0
 8004580:	b950      	cbnz	r0, 8004598 <__ssputs_r+0x5c>
 8004582:	230c      	movs	r3, #12
 8004584:	f8ca 3000 	str.w	r3, [sl]
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	463a      	mov	r2, r7
 800459a:	6921      	ldr	r1, [r4, #16]
 800459c:	f000 faa8 	bl	8004af0 <memcpy>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	6126      	str	r6, [r4, #16]
 80045ae:	6165      	str	r5, [r4, #20]
 80045b0:	443e      	add	r6, r7
 80045b2:	1bed      	subs	r5, r5, r7
 80045b4:	6026      	str	r6, [r4, #0]
 80045b6:	60a5      	str	r5, [r4, #8]
 80045b8:	464e      	mov	r6, r9
 80045ba:	454e      	cmp	r6, r9
 80045bc:	d900      	bls.n	80045c0 <__ssputs_r+0x84>
 80045be:	464e      	mov	r6, r9
 80045c0:	4632      	mov	r2, r6
 80045c2:	4641      	mov	r1, r8
 80045c4:	6820      	ldr	r0, [r4, #0]
 80045c6:	f000 fa9e 	bl	8004b06 <memmove>
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	1b9b      	subs	r3, r3, r6
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	441e      	add	r6, r3
 80045d4:	6026      	str	r6, [r4, #0]
 80045d6:	2000      	movs	r0, #0
 80045d8:	e7dc      	b.n	8004594 <__ssputs_r+0x58>
 80045da:	462a      	mov	r2, r5
 80045dc:	f000 fb54 	bl	8004c88 <_realloc_r>
 80045e0:	4606      	mov	r6, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1e2      	bne.n	80045ac <__ssputs_r+0x70>
 80045e6:	6921      	ldr	r1, [r4, #16]
 80045e8:	4650      	mov	r0, sl
 80045ea:	f000 faa5 	bl	8004b38 <_free_r>
 80045ee:	e7c8      	b.n	8004582 <__ssputs_r+0x46>

080045f0 <_svfiprintf_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	461d      	mov	r5, r3
 80045f6:	898b      	ldrh	r3, [r1, #12]
 80045f8:	061f      	lsls	r7, r3, #24
 80045fa:	b09d      	sub	sp, #116	; 0x74
 80045fc:	4680      	mov	r8, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	4616      	mov	r6, r2
 8004602:	d50f      	bpl.n	8004624 <_svfiprintf_r+0x34>
 8004604:	690b      	ldr	r3, [r1, #16]
 8004606:	b96b      	cbnz	r3, 8004624 <_svfiprintf_r+0x34>
 8004608:	2140      	movs	r1, #64	; 0x40
 800460a:	f000 fae3 	bl	8004bd4 <_malloc_r>
 800460e:	6020      	str	r0, [r4, #0]
 8004610:	6120      	str	r0, [r4, #16]
 8004612:	b928      	cbnz	r0, 8004620 <_svfiprintf_r+0x30>
 8004614:	230c      	movs	r3, #12
 8004616:	f8c8 3000 	str.w	r3, [r8]
 800461a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800461e:	e0c8      	b.n	80047b2 <_svfiprintf_r+0x1c2>
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	6163      	str	r3, [r4, #20]
 8004624:	2300      	movs	r3, #0
 8004626:	9309      	str	r3, [sp, #36]	; 0x24
 8004628:	2320      	movs	r3, #32
 800462a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800462e:	2330      	movs	r3, #48	; 0x30
 8004630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004634:	9503      	str	r5, [sp, #12]
 8004636:	f04f 0b01 	mov.w	fp, #1
 800463a:	4637      	mov	r7, r6
 800463c:	463d      	mov	r5, r7
 800463e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004642:	b10b      	cbz	r3, 8004648 <_svfiprintf_r+0x58>
 8004644:	2b25      	cmp	r3, #37	; 0x25
 8004646:	d13e      	bne.n	80046c6 <_svfiprintf_r+0xd6>
 8004648:	ebb7 0a06 	subs.w	sl, r7, r6
 800464c:	d00b      	beq.n	8004666 <_svfiprintf_r+0x76>
 800464e:	4653      	mov	r3, sl
 8004650:	4632      	mov	r2, r6
 8004652:	4621      	mov	r1, r4
 8004654:	4640      	mov	r0, r8
 8004656:	f7ff ff71 	bl	800453c <__ssputs_r>
 800465a:	3001      	adds	r0, #1
 800465c:	f000 80a4 	beq.w	80047a8 <_svfiprintf_r+0x1b8>
 8004660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004662:	4453      	add	r3, sl
 8004664:	9309      	str	r3, [sp, #36]	; 0x24
 8004666:	783b      	ldrb	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 809d 	beq.w	80047a8 <_svfiprintf_r+0x1b8>
 800466e:	2300      	movs	r3, #0
 8004670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004678:	9304      	str	r3, [sp, #16]
 800467a:	9307      	str	r3, [sp, #28]
 800467c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004680:	931a      	str	r3, [sp, #104]	; 0x68
 8004682:	462f      	mov	r7, r5
 8004684:	2205      	movs	r2, #5
 8004686:	f817 1b01 	ldrb.w	r1, [r7], #1
 800468a:	4850      	ldr	r0, [pc, #320]	; (80047cc <_svfiprintf_r+0x1dc>)
 800468c:	f7fb fda8 	bl	80001e0 <memchr>
 8004690:	9b04      	ldr	r3, [sp, #16]
 8004692:	b9d0      	cbnz	r0, 80046ca <_svfiprintf_r+0xda>
 8004694:	06d9      	lsls	r1, r3, #27
 8004696:	bf44      	itt	mi
 8004698:	2220      	movmi	r2, #32
 800469a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800469e:	071a      	lsls	r2, r3, #28
 80046a0:	bf44      	itt	mi
 80046a2:	222b      	movmi	r2, #43	; 0x2b
 80046a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046a8:	782a      	ldrb	r2, [r5, #0]
 80046aa:	2a2a      	cmp	r2, #42	; 0x2a
 80046ac:	d015      	beq.n	80046da <_svfiprintf_r+0xea>
 80046ae:	9a07      	ldr	r2, [sp, #28]
 80046b0:	462f      	mov	r7, r5
 80046b2:	2000      	movs	r0, #0
 80046b4:	250a      	movs	r5, #10
 80046b6:	4639      	mov	r1, r7
 80046b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046bc:	3b30      	subs	r3, #48	; 0x30
 80046be:	2b09      	cmp	r3, #9
 80046c0:	d94d      	bls.n	800475e <_svfiprintf_r+0x16e>
 80046c2:	b1b8      	cbz	r0, 80046f4 <_svfiprintf_r+0x104>
 80046c4:	e00f      	b.n	80046e6 <_svfiprintf_r+0xf6>
 80046c6:	462f      	mov	r7, r5
 80046c8:	e7b8      	b.n	800463c <_svfiprintf_r+0x4c>
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <_svfiprintf_r+0x1dc>)
 80046cc:	1a80      	subs	r0, r0, r2
 80046ce:	fa0b f000 	lsl.w	r0, fp, r0
 80046d2:	4318      	orrs	r0, r3
 80046d4:	9004      	str	r0, [sp, #16]
 80046d6:	463d      	mov	r5, r7
 80046d8:	e7d3      	b.n	8004682 <_svfiprintf_r+0x92>
 80046da:	9a03      	ldr	r2, [sp, #12]
 80046dc:	1d11      	adds	r1, r2, #4
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	9103      	str	r1, [sp, #12]
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	db01      	blt.n	80046ea <_svfiprintf_r+0xfa>
 80046e6:	9207      	str	r2, [sp, #28]
 80046e8:	e004      	b.n	80046f4 <_svfiprintf_r+0x104>
 80046ea:	4252      	negs	r2, r2
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	9207      	str	r2, [sp, #28]
 80046f2:	9304      	str	r3, [sp, #16]
 80046f4:	783b      	ldrb	r3, [r7, #0]
 80046f6:	2b2e      	cmp	r3, #46	; 0x2e
 80046f8:	d10c      	bne.n	8004714 <_svfiprintf_r+0x124>
 80046fa:	787b      	ldrb	r3, [r7, #1]
 80046fc:	2b2a      	cmp	r3, #42	; 0x2a
 80046fe:	d133      	bne.n	8004768 <_svfiprintf_r+0x178>
 8004700:	9b03      	ldr	r3, [sp, #12]
 8004702:	1d1a      	adds	r2, r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	9203      	str	r2, [sp, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	bfb8      	it	lt
 800470c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004710:	3702      	adds	r7, #2
 8004712:	9305      	str	r3, [sp, #20]
 8004714:	4d2e      	ldr	r5, [pc, #184]	; (80047d0 <_svfiprintf_r+0x1e0>)
 8004716:	7839      	ldrb	r1, [r7, #0]
 8004718:	2203      	movs	r2, #3
 800471a:	4628      	mov	r0, r5
 800471c:	f7fb fd60 	bl	80001e0 <memchr>
 8004720:	b138      	cbz	r0, 8004732 <_svfiprintf_r+0x142>
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	1b40      	subs	r0, r0, r5
 8004726:	fa03 f000 	lsl.w	r0, r3, r0
 800472a:	9b04      	ldr	r3, [sp, #16]
 800472c:	4303      	orrs	r3, r0
 800472e:	3701      	adds	r7, #1
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	7839      	ldrb	r1, [r7, #0]
 8004734:	4827      	ldr	r0, [pc, #156]	; (80047d4 <_svfiprintf_r+0x1e4>)
 8004736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800473a:	2206      	movs	r2, #6
 800473c:	1c7e      	adds	r6, r7, #1
 800473e:	f7fb fd4f 	bl	80001e0 <memchr>
 8004742:	2800      	cmp	r0, #0
 8004744:	d038      	beq.n	80047b8 <_svfiprintf_r+0x1c8>
 8004746:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <_svfiprintf_r+0x1e8>)
 8004748:	bb13      	cbnz	r3, 8004790 <_svfiprintf_r+0x1a0>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	3307      	adds	r3, #7
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	3308      	adds	r3, #8
 8004754:	9303      	str	r3, [sp, #12]
 8004756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004758:	444b      	add	r3, r9
 800475a:	9309      	str	r3, [sp, #36]	; 0x24
 800475c:	e76d      	b.n	800463a <_svfiprintf_r+0x4a>
 800475e:	fb05 3202 	mla	r2, r5, r2, r3
 8004762:	2001      	movs	r0, #1
 8004764:	460f      	mov	r7, r1
 8004766:	e7a6      	b.n	80046b6 <_svfiprintf_r+0xc6>
 8004768:	2300      	movs	r3, #0
 800476a:	3701      	adds	r7, #1
 800476c:	9305      	str	r3, [sp, #20]
 800476e:	4619      	mov	r1, r3
 8004770:	250a      	movs	r5, #10
 8004772:	4638      	mov	r0, r7
 8004774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004778:	3a30      	subs	r2, #48	; 0x30
 800477a:	2a09      	cmp	r2, #9
 800477c:	d903      	bls.n	8004786 <_svfiprintf_r+0x196>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0c8      	beq.n	8004714 <_svfiprintf_r+0x124>
 8004782:	9105      	str	r1, [sp, #20]
 8004784:	e7c6      	b.n	8004714 <_svfiprintf_r+0x124>
 8004786:	fb05 2101 	mla	r1, r5, r1, r2
 800478a:	2301      	movs	r3, #1
 800478c:	4607      	mov	r7, r0
 800478e:	e7f0      	b.n	8004772 <_svfiprintf_r+0x182>
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4622      	mov	r2, r4
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <_svfiprintf_r+0x1ec>)
 8004798:	a904      	add	r1, sp, #16
 800479a:	4640      	mov	r0, r8
 800479c:	f3af 8000 	nop.w
 80047a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80047a4:	4681      	mov	r9, r0
 80047a6:	d1d6      	bne.n	8004756 <_svfiprintf_r+0x166>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	065b      	lsls	r3, r3, #25
 80047ac:	f53f af35 	bmi.w	800461a <_svfiprintf_r+0x2a>
 80047b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047b2:	b01d      	add	sp, #116	; 0x74
 80047b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b8:	ab03      	add	r3, sp, #12
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4622      	mov	r2, r4
 80047be:	4b07      	ldr	r3, [pc, #28]	; (80047dc <_svfiprintf_r+0x1ec>)
 80047c0:	a904      	add	r1, sp, #16
 80047c2:	4640      	mov	r0, r8
 80047c4:	f000 f882 	bl	80048cc <_printf_i>
 80047c8:	e7ea      	b.n	80047a0 <_svfiprintf_r+0x1b0>
 80047ca:	bf00      	nop
 80047cc:	08004d8c 	.word	0x08004d8c
 80047d0:	08004d92 	.word	0x08004d92
 80047d4:	08004d96 	.word	0x08004d96
 80047d8:	00000000 	.word	0x00000000
 80047dc:	0800453d 	.word	0x0800453d

080047e0 <_printf_common>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	4691      	mov	r9, r2
 80047e6:	461f      	mov	r7, r3
 80047e8:	688a      	ldr	r2, [r1, #8]
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bfb8      	it	lt
 80047f4:	4613      	movlt	r3, r2
 80047f6:	f8c9 3000 	str.w	r3, [r9]
 80047fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047fe:	4606      	mov	r6, r0
 8004800:	460c      	mov	r4, r1
 8004802:	b112      	cbz	r2, 800480a <_printf_common+0x2a>
 8004804:	3301      	adds	r3, #1
 8004806:	f8c9 3000 	str.w	r3, [r9]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004814:	3302      	addmi	r3, #2
 8004816:	f8c9 3000 	strmi.w	r3, [r9]
 800481a:	6825      	ldr	r5, [r4, #0]
 800481c:	f015 0506 	ands.w	r5, r5, #6
 8004820:	d107      	bne.n	8004832 <_printf_common+0x52>
 8004822:	f104 0a19 	add.w	sl, r4, #25
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	f8d9 2000 	ldr.w	r2, [r9]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	42ab      	cmp	r3, r5
 8004830:	dc28      	bgt.n	8004884 <_printf_common+0xa4>
 8004832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	3300      	adds	r3, #0
 800483a:	bf18      	it	ne
 800483c:	2301      	movne	r3, #1
 800483e:	0692      	lsls	r2, r2, #26
 8004840:	d42d      	bmi.n	800489e <_printf_common+0xbe>
 8004842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004846:	4639      	mov	r1, r7
 8004848:	4630      	mov	r0, r6
 800484a:	47c0      	blx	r8
 800484c:	3001      	adds	r0, #1
 800484e:	d020      	beq.n	8004892 <_printf_common+0xb2>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	68e5      	ldr	r5, [r4, #12]
 8004854:	f8d9 2000 	ldr.w	r2, [r9]
 8004858:	f003 0306 	and.w	r3, r3, #6
 800485c:	2b04      	cmp	r3, #4
 800485e:	bf08      	it	eq
 8004860:	1aad      	subeq	r5, r5, r2
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	bf0c      	ite	eq
 8004868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800486c:	2500      	movne	r5, #0
 800486e:	4293      	cmp	r3, r2
 8004870:	bfc4      	itt	gt
 8004872:	1a9b      	subgt	r3, r3, r2
 8004874:	18ed      	addgt	r5, r5, r3
 8004876:	f04f 0900 	mov.w	r9, #0
 800487a:	341a      	adds	r4, #26
 800487c:	454d      	cmp	r5, r9
 800487e:	d11a      	bne.n	80048b6 <_printf_common+0xd6>
 8004880:	2000      	movs	r0, #0
 8004882:	e008      	b.n	8004896 <_printf_common+0xb6>
 8004884:	2301      	movs	r3, #1
 8004886:	4652      	mov	r2, sl
 8004888:	4639      	mov	r1, r7
 800488a:	4630      	mov	r0, r6
 800488c:	47c0      	blx	r8
 800488e:	3001      	adds	r0, #1
 8004890:	d103      	bne.n	800489a <_printf_common+0xba>
 8004892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489a:	3501      	adds	r5, #1
 800489c:	e7c3      	b.n	8004826 <_printf_common+0x46>
 800489e:	18e1      	adds	r1, r4, r3
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	2030      	movs	r0, #48	; 0x30
 80048a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a8:	4422      	add	r2, r4
 80048aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b2:	3302      	adds	r3, #2
 80048b4:	e7c5      	b.n	8004842 <_printf_common+0x62>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4622      	mov	r2, r4
 80048ba:	4639      	mov	r1, r7
 80048bc:	4630      	mov	r0, r6
 80048be:	47c0      	blx	r8
 80048c0:	3001      	adds	r0, #1
 80048c2:	d0e6      	beq.n	8004892 <_printf_common+0xb2>
 80048c4:	f109 0901 	add.w	r9, r9, #1
 80048c8:	e7d8      	b.n	800487c <_printf_common+0x9c>
	...

080048cc <_printf_i>:
 80048cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048d4:	460c      	mov	r4, r1
 80048d6:	7e09      	ldrb	r1, [r1, #24]
 80048d8:	b085      	sub	sp, #20
 80048da:	296e      	cmp	r1, #110	; 0x6e
 80048dc:	4617      	mov	r7, r2
 80048de:	4606      	mov	r6, r0
 80048e0:	4698      	mov	r8, r3
 80048e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048e4:	f000 80b3 	beq.w	8004a4e <_printf_i+0x182>
 80048e8:	d822      	bhi.n	8004930 <_printf_i+0x64>
 80048ea:	2963      	cmp	r1, #99	; 0x63
 80048ec:	d036      	beq.n	800495c <_printf_i+0x90>
 80048ee:	d80a      	bhi.n	8004906 <_printf_i+0x3a>
 80048f0:	2900      	cmp	r1, #0
 80048f2:	f000 80b9 	beq.w	8004a68 <_printf_i+0x19c>
 80048f6:	2958      	cmp	r1, #88	; 0x58
 80048f8:	f000 8083 	beq.w	8004a02 <_printf_i+0x136>
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004904:	e032      	b.n	800496c <_printf_i+0xa0>
 8004906:	2964      	cmp	r1, #100	; 0x64
 8004908:	d001      	beq.n	800490e <_printf_i+0x42>
 800490a:	2969      	cmp	r1, #105	; 0x69
 800490c:	d1f6      	bne.n	80048fc <_printf_i+0x30>
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	6813      	ldr	r3, [r2, #0]
 8004912:	0605      	lsls	r5, r0, #24
 8004914:	f103 0104 	add.w	r1, r3, #4
 8004918:	d52a      	bpl.n	8004970 <_printf_i+0xa4>
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da03      	bge.n	800492a <_printf_i+0x5e>
 8004922:	222d      	movs	r2, #45	; 0x2d
 8004924:	425b      	negs	r3, r3
 8004926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800492a:	486f      	ldr	r0, [pc, #444]	; (8004ae8 <_printf_i+0x21c>)
 800492c:	220a      	movs	r2, #10
 800492e:	e039      	b.n	80049a4 <_printf_i+0xd8>
 8004930:	2973      	cmp	r1, #115	; 0x73
 8004932:	f000 809d 	beq.w	8004a70 <_printf_i+0x1a4>
 8004936:	d808      	bhi.n	800494a <_printf_i+0x7e>
 8004938:	296f      	cmp	r1, #111	; 0x6f
 800493a:	d020      	beq.n	800497e <_printf_i+0xb2>
 800493c:	2970      	cmp	r1, #112	; 0x70
 800493e:	d1dd      	bne.n	80048fc <_printf_i+0x30>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	f043 0320 	orr.w	r3, r3, #32
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	e003      	b.n	8004952 <_printf_i+0x86>
 800494a:	2975      	cmp	r1, #117	; 0x75
 800494c:	d017      	beq.n	800497e <_printf_i+0xb2>
 800494e:	2978      	cmp	r1, #120	; 0x78
 8004950:	d1d4      	bne.n	80048fc <_printf_i+0x30>
 8004952:	2378      	movs	r3, #120	; 0x78
 8004954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004958:	4864      	ldr	r0, [pc, #400]	; (8004aec <_printf_i+0x220>)
 800495a:	e055      	b.n	8004a08 <_printf_i+0x13c>
 800495c:	6813      	ldr	r3, [r2, #0]
 800495e:	1d19      	adds	r1, r3, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6011      	str	r1, [r2, #0]
 8004964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800496c:	2301      	movs	r3, #1
 800496e:	e08c      	b.n	8004a8a <_printf_i+0x1be>
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6011      	str	r1, [r2, #0]
 8004974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004978:	bf18      	it	ne
 800497a:	b21b      	sxthne	r3, r3
 800497c:	e7cf      	b.n	800491e <_printf_i+0x52>
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	1d18      	adds	r0, r3, #4
 8004984:	6010      	str	r0, [r2, #0]
 8004986:	0628      	lsls	r0, r5, #24
 8004988:	d501      	bpl.n	800498e <_printf_i+0xc2>
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	e002      	b.n	8004994 <_printf_i+0xc8>
 800498e:	0668      	lsls	r0, r5, #25
 8004990:	d5fb      	bpl.n	800498a <_printf_i+0xbe>
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	4854      	ldr	r0, [pc, #336]	; (8004ae8 <_printf_i+0x21c>)
 8004996:	296f      	cmp	r1, #111	; 0x6f
 8004998:	bf14      	ite	ne
 800499a:	220a      	movne	r2, #10
 800499c:	2208      	moveq	r2, #8
 800499e:	2100      	movs	r1, #0
 80049a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049a4:	6865      	ldr	r5, [r4, #4]
 80049a6:	60a5      	str	r5, [r4, #8]
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	f2c0 8095 	blt.w	8004ad8 <_printf_i+0x20c>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	f021 0104 	bic.w	r1, r1, #4
 80049b4:	6021      	str	r1, [r4, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d13d      	bne.n	8004a36 <_printf_i+0x16a>
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	f040 808e 	bne.w	8004adc <_printf_i+0x210>
 80049c0:	4665      	mov	r5, ip
 80049c2:	2a08      	cmp	r2, #8
 80049c4:	d10b      	bne.n	80049de <_printf_i+0x112>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	07db      	lsls	r3, r3, #31
 80049ca:	d508      	bpl.n	80049de <_printf_i+0x112>
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	bfde      	ittt	le
 80049d4:	2330      	movle	r3, #48	; 0x30
 80049d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049de:	ebac 0305 	sub.w	r3, ip, r5
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	f8cd 8000 	str.w	r8, [sp]
 80049e8:	463b      	mov	r3, r7
 80049ea:	aa03      	add	r2, sp, #12
 80049ec:	4621      	mov	r1, r4
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff fef6 	bl	80047e0 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d14d      	bne.n	8004a94 <_printf_i+0x1c8>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049fc:	b005      	add	sp, #20
 80049fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a02:	4839      	ldr	r0, [pc, #228]	; (8004ae8 <_printf_i+0x21c>)
 8004a04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	1d1d      	adds	r5, r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6015      	str	r5, [r2, #0]
 8004a12:	060a      	lsls	r2, r1, #24
 8004a14:	d50b      	bpl.n	8004a2e <_printf_i+0x162>
 8004a16:	07ca      	lsls	r2, r1, #31
 8004a18:	bf44      	itt	mi
 8004a1a:	f041 0120 	orrmi.w	r1, r1, #32
 8004a1e:	6021      	strmi	r1, [r4, #0]
 8004a20:	b91b      	cbnz	r3, 8004a2a <_printf_i+0x15e>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	f022 0220 	bic.w	r2, r2, #32
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	e7b7      	b.n	800499e <_printf_i+0xd2>
 8004a2e:	064d      	lsls	r5, r1, #25
 8004a30:	bf48      	it	mi
 8004a32:	b29b      	uxthmi	r3, r3
 8004a34:	e7ef      	b.n	8004a16 <_printf_i+0x14a>
 8004a36:	4665      	mov	r5, ip
 8004a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a3c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a40:	5cc3      	ldrb	r3, [r0, r3]
 8004a42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a46:	460b      	mov	r3, r1
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d1f5      	bne.n	8004a38 <_printf_i+0x16c>
 8004a4c:	e7b9      	b.n	80049c2 <_printf_i+0xf6>
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	6825      	ldr	r5, [r4, #0]
 8004a52:	6961      	ldr	r1, [r4, #20]
 8004a54:	1d18      	adds	r0, r3, #4
 8004a56:	6010      	str	r0, [r2, #0]
 8004a58:	0628      	lsls	r0, r5, #24
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	d501      	bpl.n	8004a62 <_printf_i+0x196>
 8004a5e:	6019      	str	r1, [r3, #0]
 8004a60:	e002      	b.n	8004a68 <_printf_i+0x19c>
 8004a62:	066a      	lsls	r2, r5, #25
 8004a64:	d5fb      	bpl.n	8004a5e <_printf_i+0x192>
 8004a66:	8019      	strh	r1, [r3, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	4665      	mov	r5, ip
 8004a6e:	e7b9      	b.n	80049e4 <_printf_i+0x118>
 8004a70:	6813      	ldr	r3, [r2, #0]
 8004a72:	1d19      	adds	r1, r3, #4
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	681d      	ldr	r5, [r3, #0]
 8004a78:	6862      	ldr	r2, [r4, #4]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f7fb fbaf 	bl	80001e0 <memchr>
 8004a82:	b108      	cbz	r0, 8004a88 <_printf_i+0x1bc>
 8004a84:	1b40      	subs	r0, r0, r5
 8004a86:	6060      	str	r0, [r4, #4]
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	6123      	str	r3, [r4, #16]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a92:	e7a7      	b.n	80049e4 <_printf_i+0x118>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	462a      	mov	r2, r5
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	47c0      	blx	r8
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d0aa      	beq.n	80049f8 <_printf_i+0x12c>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	079b      	lsls	r3, r3, #30
 8004aa6:	d413      	bmi.n	8004ad0 <_printf_i+0x204>
 8004aa8:	68e0      	ldr	r0, [r4, #12]
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	4298      	cmp	r0, r3
 8004aae:	bfb8      	it	lt
 8004ab0:	4618      	movlt	r0, r3
 8004ab2:	e7a3      	b.n	80049fc <_printf_i+0x130>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	464a      	mov	r2, r9
 8004ab8:	4639      	mov	r1, r7
 8004aba:	4630      	mov	r0, r6
 8004abc:	47c0      	blx	r8
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d09a      	beq.n	80049f8 <_printf_i+0x12c>
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	9a03      	ldr	r2, [sp, #12]
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	42ab      	cmp	r3, r5
 8004acc:	dcf2      	bgt.n	8004ab4 <_printf_i+0x1e8>
 8004ace:	e7eb      	b.n	8004aa8 <_printf_i+0x1dc>
 8004ad0:	2500      	movs	r5, #0
 8004ad2:	f104 0919 	add.w	r9, r4, #25
 8004ad6:	e7f5      	b.n	8004ac4 <_printf_i+0x1f8>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1ac      	bne.n	8004a36 <_printf_i+0x16a>
 8004adc:	7803      	ldrb	r3, [r0, #0]
 8004ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae6:	e76c      	b.n	80049c2 <_printf_i+0xf6>
 8004ae8:	08004d9d 	.word	0x08004d9d
 8004aec:	08004dae 	.word	0x08004dae

08004af0 <memcpy>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	1e43      	subs	r3, r0, #1
 8004af4:	440a      	add	r2, r1
 8004af6:	4291      	cmp	r1, r2
 8004af8:	d100      	bne.n	8004afc <memcpy+0xc>
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b04:	e7f7      	b.n	8004af6 <memcpy+0x6>

08004b06 <memmove>:
 8004b06:	4288      	cmp	r0, r1
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	eb01 0302 	add.w	r3, r1, r2
 8004b0e:	d807      	bhi.n	8004b20 <memmove+0x1a>
 8004b10:	1e42      	subs	r2, r0, #1
 8004b12:	4299      	cmp	r1, r3
 8004b14:	d00a      	beq.n	8004b2c <memmove+0x26>
 8004b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004b1e:	e7f8      	b.n	8004b12 <memmove+0xc>
 8004b20:	4283      	cmp	r3, r0
 8004b22:	d9f5      	bls.n	8004b10 <memmove+0xa>
 8004b24:	1881      	adds	r1, r0, r2
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	42d3      	cmn	r3, r2
 8004b2a:	d100      	bne.n	8004b2e <memmove+0x28>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b32:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b36:	e7f7      	b.n	8004b28 <memmove+0x22>

08004b38 <_free_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d045      	beq.n	8004bcc <_free_r+0x94>
 8004b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b44:	1f0c      	subs	r4, r1, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	18e4      	addlt	r4, r4, r3
 8004b4c:	f000 f8d2 	bl	8004cf4 <__malloc_lock>
 8004b50:	4a1f      	ldr	r2, [pc, #124]	; (8004bd0 <_free_r+0x98>)
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	4610      	mov	r0, r2
 8004b56:	b933      	cbnz	r3, 8004b66 <_free_r+0x2e>
 8004b58:	6063      	str	r3, [r4, #4]
 8004b5a:	6014      	str	r4, [r2, #0]
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b62:	f000 b8c8 	b.w	8004cf6 <__malloc_unlock>
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	d90c      	bls.n	8004b84 <_free_r+0x4c>
 8004b6a:	6821      	ldr	r1, [r4, #0]
 8004b6c:	1862      	adds	r2, r4, r1
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	bf04      	itt	eq
 8004b72:	681a      	ldreq	r2, [r3, #0]
 8004b74:	685b      	ldreq	r3, [r3, #4]
 8004b76:	6063      	str	r3, [r4, #4]
 8004b78:	bf04      	itt	eq
 8004b7a:	1852      	addeq	r2, r2, r1
 8004b7c:	6022      	streq	r2, [r4, #0]
 8004b7e:	6004      	str	r4, [r0, #0]
 8004b80:	e7ec      	b.n	8004b5c <_free_r+0x24>
 8004b82:	4613      	mov	r3, r2
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	b10a      	cbz	r2, 8004b8c <_free_r+0x54>
 8004b88:	42a2      	cmp	r2, r4
 8004b8a:	d9fa      	bls.n	8004b82 <_free_r+0x4a>
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	1858      	adds	r0, r3, r1
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d10b      	bne.n	8004bac <_free_r+0x74>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	4401      	add	r1, r0
 8004b98:	1858      	adds	r0, r3, r1
 8004b9a:	4282      	cmp	r2, r0
 8004b9c:	6019      	str	r1, [r3, #0]
 8004b9e:	d1dd      	bne.n	8004b5c <_free_r+0x24>
 8004ba0:	6810      	ldr	r0, [r2, #0]
 8004ba2:	6852      	ldr	r2, [r2, #4]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	4401      	add	r1, r0
 8004ba8:	6019      	str	r1, [r3, #0]
 8004baa:	e7d7      	b.n	8004b5c <_free_r+0x24>
 8004bac:	d902      	bls.n	8004bb4 <_free_r+0x7c>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	e7d3      	b.n	8004b5c <_free_r+0x24>
 8004bb4:	6820      	ldr	r0, [r4, #0]
 8004bb6:	1821      	adds	r1, r4, r0
 8004bb8:	428a      	cmp	r2, r1
 8004bba:	bf04      	itt	eq
 8004bbc:	6811      	ldreq	r1, [r2, #0]
 8004bbe:	6852      	ldreq	r2, [r2, #4]
 8004bc0:	6062      	str	r2, [r4, #4]
 8004bc2:	bf04      	itt	eq
 8004bc4:	1809      	addeq	r1, r1, r0
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	605c      	str	r4, [r3, #4]
 8004bca:	e7c7      	b.n	8004b5c <_free_r+0x24>
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000090 	.word	0x20000090

08004bd4 <_malloc_r>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	1ccd      	adds	r5, r1, #3
 8004bd8:	f025 0503 	bic.w	r5, r5, #3
 8004bdc:	3508      	adds	r5, #8
 8004bde:	2d0c      	cmp	r5, #12
 8004be0:	bf38      	it	cc
 8004be2:	250c      	movcc	r5, #12
 8004be4:	2d00      	cmp	r5, #0
 8004be6:	4606      	mov	r6, r0
 8004be8:	db01      	blt.n	8004bee <_malloc_r+0x1a>
 8004bea:	42a9      	cmp	r1, r5
 8004bec:	d903      	bls.n	8004bf6 <_malloc_r+0x22>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	bd70      	pop	{r4, r5, r6, pc}
 8004bf6:	f000 f87d 	bl	8004cf4 <__malloc_lock>
 8004bfa:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <_malloc_r+0xac>)
 8004bfc:	6814      	ldr	r4, [r2, #0]
 8004bfe:	4621      	mov	r1, r4
 8004c00:	b991      	cbnz	r1, 8004c28 <_malloc_r+0x54>
 8004c02:	4c20      	ldr	r4, [pc, #128]	; (8004c84 <_malloc_r+0xb0>)
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	b91b      	cbnz	r3, 8004c10 <_malloc_r+0x3c>
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f863 	bl	8004cd4 <_sbrk_r>
 8004c0e:	6020      	str	r0, [r4, #0]
 8004c10:	4629      	mov	r1, r5
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f85e 	bl	8004cd4 <_sbrk_r>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d124      	bne.n	8004c66 <_malloc_r+0x92>
 8004c1c:	230c      	movs	r3, #12
 8004c1e:	6033      	str	r3, [r6, #0]
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 f868 	bl	8004cf6 <__malloc_unlock>
 8004c26:	e7e4      	b.n	8004bf2 <_malloc_r+0x1e>
 8004c28:	680b      	ldr	r3, [r1, #0]
 8004c2a:	1b5b      	subs	r3, r3, r5
 8004c2c:	d418      	bmi.n	8004c60 <_malloc_r+0x8c>
 8004c2e:	2b0b      	cmp	r3, #11
 8004c30:	d90f      	bls.n	8004c52 <_malloc_r+0x7e>
 8004c32:	600b      	str	r3, [r1, #0]
 8004c34:	50cd      	str	r5, [r1, r3]
 8004c36:	18cc      	adds	r4, r1, r3
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 f85c 	bl	8004cf6 <__malloc_unlock>
 8004c3e:	f104 000b 	add.w	r0, r4, #11
 8004c42:	1d23      	adds	r3, r4, #4
 8004c44:	f020 0007 	bic.w	r0, r0, #7
 8004c48:	1ac3      	subs	r3, r0, r3
 8004c4a:	d0d3      	beq.n	8004bf4 <_malloc_r+0x20>
 8004c4c:	425a      	negs	r2, r3
 8004c4e:	50e2      	str	r2, [r4, r3]
 8004c50:	e7d0      	b.n	8004bf4 <_malloc_r+0x20>
 8004c52:	428c      	cmp	r4, r1
 8004c54:	684b      	ldr	r3, [r1, #4]
 8004c56:	bf16      	itet	ne
 8004c58:	6063      	strne	r3, [r4, #4]
 8004c5a:	6013      	streq	r3, [r2, #0]
 8004c5c:	460c      	movne	r4, r1
 8004c5e:	e7eb      	b.n	8004c38 <_malloc_r+0x64>
 8004c60:	460c      	mov	r4, r1
 8004c62:	6849      	ldr	r1, [r1, #4]
 8004c64:	e7cc      	b.n	8004c00 <_malloc_r+0x2c>
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d005      	beq.n	8004c7c <_malloc_r+0xa8>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4630      	mov	r0, r6
 8004c74:	f000 f82e 	bl	8004cd4 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d0cf      	beq.n	8004c1c <_malloc_r+0x48>
 8004c7c:	6025      	str	r5, [r4, #0]
 8004c7e:	e7db      	b.n	8004c38 <_malloc_r+0x64>
 8004c80:	20000090 	.word	0x20000090
 8004c84:	20000094 	.word	0x20000094

08004c88 <_realloc_r>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	460e      	mov	r6, r1
 8004c90:	b921      	cbnz	r1, 8004c9c <_realloc_r+0x14>
 8004c92:	4611      	mov	r1, r2
 8004c94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c98:	f7ff bf9c 	b.w	8004bd4 <_malloc_r>
 8004c9c:	b922      	cbnz	r2, 8004ca8 <_realloc_r+0x20>
 8004c9e:	f7ff ff4b 	bl	8004b38 <_free_r>
 8004ca2:	4625      	mov	r5, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca8:	f000 f826 	bl	8004cf8 <_malloc_usable_size_r>
 8004cac:	42a0      	cmp	r0, r4
 8004cae:	d20f      	bcs.n	8004cd0 <_realloc_r+0x48>
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f7ff ff8e 	bl	8004bd4 <_malloc_r>
 8004cb8:	4605      	mov	r5, r0
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d0f2      	beq.n	8004ca4 <_realloc_r+0x1c>
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	f7ff ff15 	bl	8004af0 <memcpy>
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ff35 	bl	8004b38 <_free_r>
 8004cce:	e7e9      	b.n	8004ca4 <_realloc_r+0x1c>
 8004cd0:	4635      	mov	r5, r6
 8004cd2:	e7e7      	b.n	8004ca4 <_realloc_r+0x1c>

08004cd4 <_sbrk_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4c06      	ldr	r4, [pc, #24]	; (8004cf0 <_sbrk_r+0x1c>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4605      	mov	r5, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	f7fc fb42 	bl	8001368 <_sbrk>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_sbrk_r+0x1a>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_sbrk_r+0x1a>
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	20000168 	.word	0x20000168

08004cf4 <__malloc_lock>:
 8004cf4:	4770      	bx	lr

08004cf6 <__malloc_unlock>:
 8004cf6:	4770      	bx	lr

08004cf8 <_malloc_usable_size_r>:
 8004cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfc:	1f18      	subs	r0, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfbc      	itt	lt
 8004d02:	580b      	ldrlt	r3, [r1, r0]
 8004d04:	18c0      	addlt	r0, r0, r3
 8004d06:	4770      	bx	lr

08004d08 <_init>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr

08004d14 <_fini>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr
