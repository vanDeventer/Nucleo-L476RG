
Timer_Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003560  08003560  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003568  08003568  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  0800357c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800357c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbfb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019da  00000000  00000000  0002dc37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  0002f618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f80  00000000  00000000  00031120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae32  00000000  00000000  000570a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef941  00000000  00000000  00061ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad8  00000000  00000000  00151890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003500 	.word	0x08003500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003500 	.word	0x08003500

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa84 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80c 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d8 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f8a6 	bl	8000628 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer16
  HAL_TIM_Base_Start_IT(&htim16);
 80004e0:	4801      	ldr	r0, [pc, #4]	; (80004e8 <main+0x20>)
 80004e2:	f002 f937 	bl	8002754 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <main+0x1e>
 80004e8:	200000a8 	.word	0x200000a8

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b0b8      	sub	sp, #224	; 0xe0
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004f6:	2244      	movs	r2, #68	; 0x44
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fff8 	bl	80034f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000510:	463b      	mov	r3, r7
 8000512:	2288      	movs	r2, #136	; 0x88
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 ffea 	bl	80034f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051c:	2302      	movs	r3, #2
 800051e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2310      	movs	r3, #16
 800052c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000542:	230a      	movs	r3, #10
 8000544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000548:	2307      	movs	r3, #7
 800054a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fe06 	bl	8001170 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800056a:	f000 f909 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2303      	movs	r3, #3
 8000576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800058c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000590:	2104      	movs	r1, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f001 f9d2 	bl	800193c <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800059e:	f000 f8ef 	bl	8000780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fbc9 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005b8:	f000 f8e2 	bl	8000780 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c0:	f000 fd80 	bl	80010c4 <HAL_PWREx_ControlVoltageScaling>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005ca:	f000 f8d9 	bl	8000780 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	37e0      	adds	r7, #224	; 0xe0
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_TIM16_Init+0x48>)
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <MX_TIM16_Init+0x4c>)
 80005e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_TIM16_Init+0x48>)
 80005e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_TIM16_Init+0x48>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_TIM16_Init+0x48>)
 80005f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80005f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_TIM16_Init+0x48>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_TIM16_Init+0x48>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_TIM16_Init+0x48>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_TIM16_Init+0x48>)
 800060c:	f002 f84a 	bl	80026a4 <HAL_TIM_Base_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000616:	f000 f8b3 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000a8 	.word	0x200000a8
 8000624:	40014400 	.word	0x40014400

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_USART2_UART_Init+0x5c>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800066c:	f002 fae2 	bl	8002c34 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000676:	f000 f883 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <MX_GPIO_Init+0xc4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a2a      	ldr	r2, [pc, #168]	; (800074c <MX_GPIO_Init+0xc4>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_GPIO_Init+0xc4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_GPIO_Init+0xc4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a24      	ldr	r2, [pc, #144]	; (800074c <MX_GPIO_Init+0xc4>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_GPIO_Init+0xc4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_GPIO_Init+0xc4>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f000 fc9d 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_GPIO_Init+0xc8>)
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_GPIO_Init+0xcc>)
 8000720:	f000 fae8 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000724:	2320      	movs	r3, #32
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 fad9 	bl	8000cf4 <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	10210000 	.word	0x10210000
 8000754:	48000800 	.word	0x48000800

08000758 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback when a has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	// Check if it is Timer16 that rolled over, if so, toggle the LED
	if (htim == &htim16) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d104      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin( GPIOA, GPIO_PIN_5);
 8000768:	2120      	movs	r1, #32
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f000 fc81 	bl	8001074 <HAL_GPIO_TogglePin>
	}
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000a8 	.word	0x200000a8

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	; 0x60
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <HAL_TIM_Base_MspInit+0x44>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d113      	bne.n	8000812 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2019      	movs	r0, #25
 8000808:	f000 fa3d 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800080c:	2019      	movs	r0, #25
 800080e:	f000 fa56 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40014400 	.word	0x40014400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <HAL_UART_MspInit+0x7c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d128      	bne.n	8000898 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_UART_MspInit+0x80>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <HAL_UART_MspInit+0x80>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	6593      	str	r3, [r2, #88]	; 0x58
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_UART_MspInit+0x80>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_UART_MspInit+0x80>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_UART_MspInit+0x80>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_UART_MspInit+0x80>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000876:	230c      	movs	r3, #12
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000886:	2307      	movs	r3, #7
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 fa2e 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40021000 	.word	0x40021000

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f8c8 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800090a:	f001 ff93 	bl	8002834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000a8 	.word	0x200000a8

08000918 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <SystemInit+0x64>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <SystemInit+0x64>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <SystemInit+0x68>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <SystemInit+0x68>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <SystemInit+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <SystemInit+0x68>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <SystemInit+0x68>)
 8000944:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000948:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800094c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <SystemInit+0x68>)
 8000950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000954:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <SystemInit+0x68>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <SystemInit+0x68>)
 800095c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000960:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <SystemInit+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <SystemInit+0x64>)
 800096a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800096e:	609a      	str	r2, [r3, #8]
#endif
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	40021000 	.word	0x40021000

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff ffc6 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800098c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800098e:	e003      	b.n	8000998 <LoopCopyDataInit>

08000990 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000992:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000994:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000996:	3104      	adds	r1, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800099c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800099e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009a0:	d3f6      	bcc.n	8000990 <CopyDataInit>
	ldr	r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80009a4:	e002      	b.n	80009ac <LoopFillZerobss>

080009a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009a8:	f842 3b04 	str.w	r3, [r2], #4

080009ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LoopForever+0x16>)
	cmp	r2, r3
 80009ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009b0:	d3f9      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f002 fd79 	bl	80034a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fd87 	bl	80004c8 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009c0:	08003570 	.word	0x08003570
	ldr	r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009c8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80009d0:	200000f8 	.word	0x200000f8

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_Init+0x3c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_Init+0x3c>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f93e 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f80f 	bl	8000a18 <HAL_InitTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	e001      	b.n	8000a0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a06:	f7ff fec3 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d023      	beq.n	8000a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_InitTick+0x70>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f949 	bl	8000cda <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10f      	bne.n	8000a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d809      	bhi.n	8000a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	f000 f913 	bl	8000c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0x74>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e004      	b.n	8000a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e001      	b.n	8000a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000f4 	.word	0x200000f4

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000f4 	.word	0x200000f4

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff29 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff3e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff31 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e17f      	b.n	8001004 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8171 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d00b      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d007      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d30:	2b11      	cmp	r3, #17
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b12      	cmp	r3, #18
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 0201 	and.w	r2, r3, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d118      	bne.n	8000ddc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x128>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80ac 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <HAL_GPIO_Init+0x32c>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	4a5d      	ldr	r2, [pc, #372]	; (8001020 <HAL_GPIO_Init+0x32c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb2:	4b5b      	ldr	r3, [pc, #364]	; (8001020 <HAL_GPIO_Init+0x32c>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebe:	4a59      	ldr	r2, [pc, #356]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x242>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x23e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_GPIO_Init+0x338>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x23a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <HAL_GPIO_Init+0x33c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x236>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4b      	ldr	r2, [pc, #300]	; (8001034 <HAL_GPIO_Init+0x340>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x232>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4a      	ldr	r2, [pc, #296]	; (8001038 <HAL_GPIO_Init+0x344>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x22e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a49      	ldr	r2, [pc, #292]	; (800103c <HAL_GPIO_Init+0x348>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x22a>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f36:	2300      	movs	r3, #0
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f48:	4936      	ldr	r1, [pc, #216]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f7a:	4a31      	ldr	r2, [pc, #196]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	f47f ae78 	bne.w	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	48000c00 	.word	0x48000c00
 8001034:	48001000 	.word	0x48001000
 8001038:	48001400 	.word	0x48001400
 800103c:	48001800 	.word	0x48001800
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001060:	e002      	b.n	8001068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43d9      	mvns	r1, r3
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	400b      	ands	r3, r1
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40007000 	.word	0x40007000

080010c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d2:	d130      	bne.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e0:	d038      	beq.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2232      	movs	r2, #50	; 0x32
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001108:	e002      	b.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3b01      	subs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111c:	d102      	bne.n	8001124 <HAL_PWREx_ControlVoltageScaling+0x60>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f2      	bne.n	800110a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001130:	d110      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e00f      	b.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800113e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001142:	d007      	beq.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001152:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40007000 	.word	0x40007000
 8001168:	20000000 	.word	0x20000000
 800116c:	431bde83 	.word	0x431bde83

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e3d4      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001182:	4ba1      	ldr	r3, [pc, #644]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118c:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80e4 	beq.w	800136c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_RCC_OscConfig+0x4a>
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	f040 808b 	bne.w	80012c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 8087 	bne.w	80012c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ba:	4b93      	ldr	r3, [pc, #588]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x62>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e3ac      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1a      	ldr	r2, [r3, #32]
 80011d6:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <HAL_RCC_OscConfig+0x7c>
 80011e2:	4b89      	ldr	r3, [pc, #548]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ea:	e005      	b.n	80011f8 <HAL_RCC_OscConfig+0x88>
 80011ec:	4b86      	ldr	r3, [pc, #536]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d223      	bcs.n	8001244 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fd3f 	bl	8001c84 <RCC_SetFlashLatencyFromMSIRange>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e38d      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001210:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4977      	ldr	r1, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	4972      	ldr	r1, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
 8001242:	e025      	b.n	8001290 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001244:	4b70      	ldr	r3, [pc, #448]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6f      	ldr	r2, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	496a      	ldr	r1, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001262:	4b69      	ldr	r3, [pc, #420]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	4965      	ldr	r1, [pc, #404]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d109      	bne.n	8001290 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fcff 	bl	8001c84 <RCC_SetFlashLatencyFromMSIRange>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e34d      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001290:	f000 fc36 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001294:	4601      	mov	r1, r0
 8001296:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HAL_RCC_OscConfig+0x29c>)
 80012a2:	5cd3      	ldrb	r3, [r2, r3]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	fa21 f303 	lsr.w	r3, r1, r3
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCC_OscConfig+0x2a0>)
 80012ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x2a4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fbaf 	bl	8000a18 <HAL_InitTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d052      	beq.n	800136a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	e331      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d032      	beq.n	8001336 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012d0:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fbec 	bl	8000ab8 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e4:	f7ff fbe8 	bl	8000ab8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e31a      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f6:	4b44      	ldr	r3, [pc, #272]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001302:	4b41      	ldr	r3, [pc, #260]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a40      	ldr	r2, [pc, #256]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	493b      	ldr	r1, [pc, #236]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	4936      	ldr	r1, [pc, #216]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
 8001334:	e01a      	b.n	800136c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a33      	ldr	r2, [pc, #204]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001342:	f7ff fbb9 	bl	8000ab8 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134a:	f7ff fbb5 	bl	8000ab8 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e2e7      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0x1da>
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d074      	beq.n	8001462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b08      	cmp	r3, #8
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x21a>
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	d10e      	bne.n	80013a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d10b      	bne.n	80013a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d064      	beq.n	8001460 <HAL_RCC_OscConfig+0x2f0>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d160      	bne.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e2c4      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x24a>
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e01d      	b.n	80013f6 <HAL_RCC_OscConfig+0x286>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c2:	d10c      	bne.n	80013de <HAL_RCC_OscConfig+0x26e>
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e00b      	b.n	80013f6 <HAL_RCC_OscConfig+0x286>
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d01c      	beq.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb5b 	bl	8000ab8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001404:	e011      	b.n	800142a <HAL_RCC_OscConfig+0x2ba>
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	08003518 	.word	0x08003518
 8001410:	20000000 	.word	0x20000000
 8001414:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fb4e 	bl	8000ab8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e280      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142a:	4baf      	ldr	r3, [pc, #700]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x2a8>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fb3e 	bl	8000ab8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fb3a 	bl	8000ab8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e26c      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001452:	4ba5      	ldr	r3, [pc, #660]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x2d0>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d060      	beq.n	8001530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x310>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d119      	bne.n	80014ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d116      	bne.n	80014ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001480:	4b99      	ldr	r3, [pc, #612]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x328>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e249      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b93      	ldr	r3, [pc, #588]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	4990      	ldr	r1, [pc, #576]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ac:	e040      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d023      	beq.n	80014fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b6:	4b8c      	ldr	r3, [pc, #560]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a8b      	ldr	r2, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff faf9 	bl	8000ab8 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff faf5 	bl	8000ab8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e227      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014dc:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	497c      	ldr	r1, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b7a      	ldr	r3, [pc, #488]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a79      	ldr	r2, [pc, #484]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff fad5 	bl	8000ab8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fad1 	bl	8000ab8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e203      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001524:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d03c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01c      	beq.n	800157e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	4a67      	ldr	r2, [pc, #412]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fab0 	bl	8000ab8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff faac 	bl	8000ab8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1de      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ef      	beq.n	800155c <HAL_RCC_OscConfig+0x3ec>
 800157c:	e01b      	b.n	80015b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fa93 	bl	8000ab8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fa8f 	bl	8000ab8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1c1      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a8:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ef      	bne.n	8001596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80a6 	beq.w	8001710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10d      	bne.n	80015f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
 80015e0:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d118      	bne.n	800162e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001608:	f7ff fa56 	bl	8000ab8 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001610:	f7ff fa52 	bl	8000ab8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e184      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001622:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_RCC_OscConfig+0x4d8>
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001646:	e024      	b.n	8001692 <HAL_RCC_OscConfig+0x522>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d110      	bne.n	8001672 <HAL_RCC_OscConfig+0x502>
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001656:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001670:	e00f      	b.n	8001692 <HAL_RCC_OscConfig+0x522>
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800168a:	f023 0304 	bic.w	r3, r3, #4
 800168e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d016      	beq.n	80016c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff fa0d 	bl	8000ab8 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fa09 	bl	8000ab8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e139      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0ed      	beq.n	80016a2 <HAL_RCC_OscConfig+0x532>
 80016c6:	e01a      	b.n	80016fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff f9f6 	bl	8000ab8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ce:	e00f      	b.n	80016f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff f9f2 	bl	8000ab8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d906      	bls.n	80016f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e122      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f0:	4b90      	ldr	r3, [pc, #576]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1e8      	bne.n	80016d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001704:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	4a8a      	ldr	r2, [pc, #552]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8108 	beq.w	800192a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	2b02      	cmp	r3, #2
 8001720:	f040 80d0 	bne.w	80018c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001724:	4b83      	ldr	r3, [pc, #524]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	429a      	cmp	r2, r3
 8001736:	d130      	bne.n	800179a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	3b01      	subs	r3, #1
 8001744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d127      	bne.n	800179a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001754:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d11f      	bne.n	800179a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001764:	2a07      	cmp	r2, #7
 8001766:	bf14      	ite	ne
 8001768:	2201      	movne	r2, #1
 800176a:	2200      	moveq	r2, #0
 800176c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176e:	4293      	cmp	r3, r2
 8001770:	d113      	bne.n	800179a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	3b01      	subs	r3, #1
 8001780:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d109      	bne.n	800179a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d06e      	beq.n	8001878 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d069      	beq.n	8001874 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a0:	4b64      	ldr	r3, [pc, #400]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b7      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017bc:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a5c      	ldr	r2, [pc, #368]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80017c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017c8:	f7ff f976 	bl	8000ab8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f972 	bl	8000ab8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0a4      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e2:	4b54      	ldr	r3, [pc, #336]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	4b51      	ldr	r3, [pc, #324]	; (8001938 <HAL_RCC_OscConfig+0x7c8>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017fe:	3a01      	subs	r2, #1
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001808:	0212      	lsls	r2, r2, #8
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001810:	0852      	lsrs	r2, r2, #1
 8001812:	3a01      	subs	r2, #1
 8001814:	0552      	lsls	r2, r2, #21
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800181c:	0852      	lsrs	r2, r2, #1
 800181e:	3a01      	subs	r2, #1
 8001820:	0652      	lsls	r2, r2, #25
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001828:	0912      	lsrs	r2, r2, #4
 800182a:	0452      	lsls	r2, r2, #17
 800182c:	430a      	orrs	r2, r1
 800182e:	4941      	ldr	r1, [pc, #260]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001834:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a3e      	ldr	r2, [pc, #248]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001840:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a3b      	ldr	r2, [pc, #236]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800184c:	f7ff f934 	bl	8000ab8 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f930 	bl	8000ab8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e062      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001872:	e05a      	b.n	800192a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e059      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001878:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d152      	bne.n	800192a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800189c:	f7ff f90c 	bl	8000ab8 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff f908 	bl	8000ab8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e03a      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x734>
 80018c2:	e032      	b.n	800192a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d02d      	beq.n	8001926 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a19      	ldr	r2, [pc, #100]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018e8:	f023 0303 	bic.w	r3, r3, #3
 80018ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 80018f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f8db 	bl	8000ab8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff f8d7 	bl	8000ab8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e009      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_RCC_OscConfig+0x7c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x796>
 8001924:	e001      	b.n	800192a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	f99d808c 	.word	0xf99d808c

0800193c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0c8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	4961      	ldr	r1, [pc, #388]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b0      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d04c      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d121      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e09e      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d115      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e092      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c4:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e086      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e07e      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 0203 	bic.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	493f      	ldr	r1, [pc, #252]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f6:	f7ff f85f 	bl	8000ab8 <HAL_GetTick>
 80019fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7ff f85b 	bl	8000ab8 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e066      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 020c 	and.w	r2, r3, #12
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d1eb      	bne.n	80019fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	492c      	ldr	r1, [pc, #176]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d210      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4924      	ldr	r1, [pc, #144]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x1b0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e036      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4918      	ldr	r1, [pc, #96]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4910      	ldr	r1, [pc, #64]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ab2:	f000 f825 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	fa21 f303 	lsr.w	r3, r1, r3
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe ff9e 	bl	8000a18 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08003518 	.word	0x08003518
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d121      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d11e      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b34:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e005      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b50:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b5c:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e004      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d133      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0xaa>
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ba6:	617b      	str	r3, [r7, #20]
      break;
 8001ba8:	e005      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bac:	617b      	str	r3, [r7, #20]
      break;
 8001bae:	e002      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	617b      	str	r3, [r7, #20]
      break;
 8001bb4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	fb02 f203 	mul.w	r2, r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0e5b      	lsrs	r3, r3, #25
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bf6:	69bb      	ldr	r3, [r7, #24]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3724      	adds	r7, #36	; 0x24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003530 	.word	0x08003530
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200

08001c14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c30:	f7ff fff0 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c34:	4601      	mov	r1, r0
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08003528 	.word	0x08003528

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c5c:	f7ff ffda 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c60:	4601      	mov	r1, r0
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0adb      	lsrs	r3, r3, #11
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08003528 	.word	0x08003528

08001c84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c9c:	f7ff fa04 	bl	80010a8 <HAL_PWREx_GetVoltageRange>
 8001ca0:	6178      	str	r0, [r7, #20]
 8001ca2:	e014      	b.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cbc:	f7ff f9f4 	bl	80010a8 <HAL_PWREx_GetVoltageRange>
 8001cc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd4:	d10b      	bne.n	8001cee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d919      	bls.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2ba0      	cmp	r3, #160	; 0xa0
 8001ce0:	d902      	bls.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e013      	b.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce8:	2301      	movs	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	e010      	b.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b80      	cmp	r3, #128	; 0x80
 8001cf2:	d902      	bls.n	8001cfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e00a      	b.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d102      	bne.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d00:	2302      	movs	r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	e004      	b.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b70      	cmp	r3, #112	; 0x70
 8001d0a:	d101      	bne.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 0207 	bic.w	r2, r3, #7
 8001d18:	4909      	ldr	r1, [pc, #36]	; (8001d40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40022000 	.word	0x40022000

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d50:	2300      	movs	r3, #0
 8001d52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d03f      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d68:	d01c      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6e:	d802      	bhi.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00e      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d74:	e01f      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d7a:	d003      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d80:	d01c      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d82:	e018      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d84:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a84      	ldr	r2, [pc, #528]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d90:	e015      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fab9 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da2:	e00c      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3320      	adds	r3, #32
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fba0 	bl	80024f0 <RCCEx_PLLSAI2_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db4:	e003      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dba:	e000      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc4:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dd2:	4972      	ldr	r1, [pc, #456]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dda:	e001      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03f      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d01c      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfa:	d802      	bhi.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001e00:	e01f      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e06:	d003      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001e08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e0c:	d01c      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e10:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a61      	ldr	r2, [pc, #388]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e1c:	e015      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fa73 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e2e:	e00c      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3320      	adds	r3, #32
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fb5a 	bl	80024f0 <RCCEx_PLLSAI2_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e40:	e003      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	74fb      	strb	r3, [r7, #19]
      break;
 8001e46:	e000      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e4a:	7cfb      	ldrb	r3, [r7, #19]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e5e:	494f      	ldr	r1, [pc, #316]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e66:	e001      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e68:	7cfb      	ldrb	r3, [r7, #19]
 8001e6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a0 	beq.w	8001fba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3a      	ldr	r2, [pc, #232]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fdfc 	bl	8000ab8 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ec2:	e009      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe fdf8 	bl	8000ab8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed6:	e005      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d15c      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01f      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d019      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f08:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fdb7 	bl	8000ab8 <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fdb3 	bl	8000ab8 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d902      	bls.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	74fb      	strb	r3, [r7, #19]
            break;
 8001f64:	e006      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ec      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f8a:	4904      	ldr	r1, [pc, #16]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f92:	e009      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
 8001f98:	e006      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa8:	7c7b      	ldrb	r3, [r7, #17]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b9e      	ldr	r3, [pc, #632]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a9d      	ldr	r2, [pc, #628]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc6:	4b98      	ldr	r3, [pc, #608]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f023 0203 	bic.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	4994      	ldr	r1, [pc, #592]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 020c 	bic.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	498c      	ldr	r1, [pc, #560]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800200a:	4b87      	ldr	r3, [pc, #540]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4983      	ldr	r1, [pc, #524]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800202c:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	497b      	ldr	r1, [pc, #492]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	4972      	ldr	r1, [pc, #456]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002070:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	496a      	ldr	r1, [pc, #424]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002092:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	4961      	ldr	r1, [pc, #388]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020b4:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4959      	ldr	r1, [pc, #356]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d6:	4b54      	ldr	r3, [pc, #336]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e4:	4950      	ldr	r1, [pc, #320]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	4948      	ldr	r1, [pc, #288]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800211a:	4b43      	ldr	r3, [pc, #268]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	493f      	ldr	r1, [pc, #252]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d028      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800213c:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214a:	4937      	ldr	r1, [pc, #220]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215a:	d106      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a31      	ldr	r2, [pc, #196]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
 8002168:	e011      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002172:	d10c      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f8c8 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d028      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	491f      	ldr	r1, [pc, #124]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c4:	60d3      	str	r3, [r2, #12]
 80021c6:	e011      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f899 	bl	8002310 <RCCEx_PLLSAI1_Config>
 80021de:	4603      	mov	r3, r0
 80021e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02b      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	4908      	ldr	r1, [pc, #32]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002216:	d109      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a02      	ldr	r2, [pc, #8]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002222:	60d3      	str	r3, [r2, #12]
 8002224:	e014      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002234:	d10c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f867 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02f      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800226a:	4928      	ldr	r1, [pc, #160]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800227a:	d10d      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3304      	adds	r3, #4
 8002280:	2102      	movs	r1, #2
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f844 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d014      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	74bb      	strb	r3, [r7, #18]
 8002296:	e011      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3320      	adds	r3, #32
 80022a6:	2102      	movs	r1, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f921 	bl	80024f0 <RCCEx_PLLSAI2_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d6:	490d      	ldr	r1, [pc, #52]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fa:	4904      	ldr	r1, [pc, #16]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002302:	7cbb      	ldrb	r3, [r7, #18]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000

08002310 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d018      	beq.n	800235c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0203 	and.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d10d      	bne.n	8002356 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
       ||
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002342:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
       ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d044      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e041      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d00c      	beq.n	800237e <RCCEx_PLLSAI1_Config+0x6e>
 8002364:	2b03      	cmp	r3, #3
 8002366:	d013      	beq.n	8002390 <RCCEx_PLLSAI1_Config+0x80>
 8002368:	2b01      	cmp	r3, #1
 800236a:	d120      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800236c:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11d      	bne.n	80023b4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e01a      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238e:	e013      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002390:	4b56      	ldr	r3, [pc, #344]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10f      	bne.n	80023bc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ac:	e006      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      break;
 80023b2:	e004      	b.n	80023be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023b4:	bf00      	nop
 80023b6:	e002      	b.n	80023be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023b8:	bf00      	nop
 80023ba:	e000      	b.n	80023be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023c4:	4b49      	ldr	r3, [pc, #292]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	430b      	orrs	r3, r1
 80023da:	4944      	ldr	r1, [pc, #272]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d17d      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a40      	ldr	r2, [pc, #256]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f2:	f7fe fb61 	bl	8000ab8 <HAL_GetTick>
 80023f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f8:	e009      	b.n	800240e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023fa:	f7fe fb5d 	bl	8000ab8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d902      	bls.n	800240e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	73fb      	strb	r3, [r7, #15]
        break;
 800240c:	e005      	b.n	800241a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ef      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d160      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d111      	bne.n	800244a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800242e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6892      	ldr	r2, [r2, #8]
 8002436:	0211      	lsls	r1, r2, #8
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68d2      	ldr	r2, [r2, #12]
 800243c:	0912      	lsrs	r2, r2, #4
 800243e:	0452      	lsls	r2, r2, #17
 8002440:	430a      	orrs	r2, r1
 8002442:	492a      	ldr	r1, [pc, #168]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	610b      	str	r3, [r1, #16]
 8002448:	e027      	b.n	800249a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d112      	bne.n	8002476 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6892      	ldr	r2, [r2, #8]
 8002460:	0211      	lsls	r1, r2, #8
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6912      	ldr	r2, [r2, #16]
 8002466:	0852      	lsrs	r2, r2, #1
 8002468:	3a01      	subs	r2, #1
 800246a:	0552      	lsls	r2, r2, #21
 800246c:	430a      	orrs	r2, r1
 800246e:	491f      	ldr	r1, [pc, #124]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	610b      	str	r3, [r1, #16]
 8002474:	e011      	b.n	800249a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800247e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6892      	ldr	r2, [r2, #8]
 8002486:	0211      	lsls	r1, r2, #8
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6952      	ldr	r2, [r2, #20]
 800248c:	0852      	lsrs	r2, r2, #1
 800248e:	3a01      	subs	r2, #1
 8002490:	0652      	lsls	r2, r2, #25
 8002492:	430a      	orrs	r2, r1
 8002494:	4915      	ldr	r1, [pc, #84]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a13      	ldr	r2, [pc, #76]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe fb07 	bl	8000ab8 <HAL_GetTick>
 80024aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ac:	e009      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ae:	f7fe fb03 	bl	8000ab8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d902      	bls.n	80024c2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	73fb      	strb	r3, [r7, #15]
          break;
 80024c0:	e005      	b.n	80024ce <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ef      	beq.n	80024ae <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000

080024f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024fe:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d018      	beq.n	800253c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800250a:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d10d      	bne.n	8002536 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
       ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
       ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d044      	beq.n	80025c0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e041      	b.n	80025c0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d00c      	beq.n	800255e <RCCEx_PLLSAI2_Config+0x6e>
 8002544:	2b03      	cmp	r3, #3
 8002546:	d013      	beq.n	8002570 <RCCEx_PLLSAI2_Config+0x80>
 8002548:	2b01      	cmp	r3, #1
 800254a:	d120      	bne.n	800258e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800254c:	4b54      	ldr	r3, [pc, #336]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d11d      	bne.n	8002594 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255c:	e01a      	b.n	8002594 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800255e:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256e:	e013      	b.n	8002598 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002570:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10f      	bne.n	800259c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800258c:	e006      	b.n	800259c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      break;
 8002592:	e004      	b.n	800259e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002594:	bf00      	nop
 8002596:	e002      	b.n	800259e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002598:	bf00      	nop
 800259a:	e000      	b.n	800259e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800259c:	bf00      	nop
    }

    if(status == HAL_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025a4:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	430b      	orrs	r3, r1
 80025ba:	4939      	ldr	r1, [pc, #228]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d167      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d2:	f7fe fa71 	bl	8000ab8 <HAL_GetTick>
 80025d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025d8:	e009      	b.n	80025ee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025da:	f7fe fa6d 	bl	8000ab8 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d902      	bls.n	80025ee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	73fb      	strb	r3, [r7, #15]
        break;
 80025ec:	e005      	b.n	80025fa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025ee:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ef      	bne.n	80025da <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d14a      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d111      	bne.n	800262a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800260e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6892      	ldr	r2, [r2, #8]
 8002616:	0211      	lsls	r1, r2, #8
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	0912      	lsrs	r2, r2, #4
 800261e:	0452      	lsls	r2, r2, #17
 8002620:	430a      	orrs	r2, r1
 8002622:	491f      	ldr	r1, [pc, #124]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	614b      	str	r3, [r1, #20]
 8002628:	e011      	b.n	800264e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002632:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	0211      	lsls	r1, r2, #8
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6912      	ldr	r2, [r2, #16]
 8002640:	0852      	lsrs	r2, r2, #1
 8002642:	3a01      	subs	r2, #1
 8002644:	0652      	lsls	r2, r2, #25
 8002646:	430a      	orrs	r2, r1
 8002648:	4915      	ldr	r1, [pc, #84]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fa2d 	bl	8000ab8 <HAL_GetTick>
 800265e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002660:	e009      	b.n	8002676 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002662:	f7fe fa29 	bl	8000ab8 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d902      	bls.n	8002676 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	73fb      	strb	r3, [r7, #15]
          break;
 8002674:	e005      	b.n	8002682 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0ef      	beq.n	8002662 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e049      	b.n	800274a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe f884 	bl	80007d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3304      	adds	r3, #4
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f000 f9ee 	bl	8002ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d001      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e04f      	b.n	800280c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <HAL_TIM_Base_Start_IT+0xc4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01d      	beq.n	80027ca <HAL_TIM_Base_Start_IT+0x76>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002796:	d018      	beq.n	80027ca <HAL_TIM_Base_Start_IT+0x76>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1f      	ldr	r2, [pc, #124]	; (800281c <HAL_TIM_Base_Start_IT+0xc8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_TIM_Base_Start_IT+0x76>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <HAL_TIM_Base_Start_IT+0xcc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00e      	beq.n	80027ca <HAL_TIM_Base_Start_IT+0x76>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <HAL_TIM_Base_Start_IT+0xd0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_TIM_Base_Start_IT+0x76>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_TIM_Base_Start_IT+0xd4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_TIM_Base_Start_IT+0x76>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_TIM_Base_Start_IT+0xd8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d115      	bne.n	80027f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_TIM_Base_Start_IT+0xdc>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b06      	cmp	r3, #6
 80027da:	d015      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0xb4>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e2:	d011      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	e008      	b.n	8002808 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e000      	b.n	800280a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40000400 	.word	0x40000400
 8002820:	40000800 	.word	0x40000800
 8002824:	40000c00 	.word	0x40000c00
 8002828:	40013400 	.word	0x40013400
 800282c:	40014000 	.word	0x40014000
 8002830:	00010007 	.word	0x00010007

08002834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d122      	bne.n	8002890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b02      	cmp	r3, #2
 8002856:	d11b      	bne.n	8002890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0202 	mvn.w	r2, #2
 8002860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f905 	bl	8002a86 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f8f7 	bl	8002a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f908 	bl	8002a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b04      	cmp	r3, #4
 800289c:	d122      	bne.n	80028e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d11b      	bne.n	80028e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0204 	mvn.w	r2, #4
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f8db 	bl	8002a86 <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8cd 	bl	8002a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f8de 	bl	8002a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0208 	mvn.w	r2, #8
 8002908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2204      	movs	r2, #4
 800290e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8b1 	bl	8002a86 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8a3 	bl	8002a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f8b4 	bl	8002a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b10      	cmp	r3, #16
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b10      	cmp	r3, #16
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0210 	mvn.w	r2, #16
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2208      	movs	r2, #8
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f887 	bl	8002a86 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f879 	bl	8002a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f88a 	bl	8002a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0201 	mvn.w	r2, #1
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd fed0 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b80      	cmp	r3, #128	; 0x80
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d107      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f914 	bl	8002c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f2:	d10e      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	2b80      	cmp	r3, #128	; 0x80
 8002a00:	d107      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f907 	bl	8002c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d10e      	bne.n	8002a3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d107      	bne.n	8002a3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f838 	bl	8002aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d10e      	bne.n	8002a6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d107      	bne.n	8002a6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f06f 0220 	mvn.w	r2, #32
 8002a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8c7 	bl	8002bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a40      	ldr	r2, [pc, #256]	; (8002bd8 <TIM_Base_SetConfig+0x114>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d013      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d00f      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3d      	ldr	r2, [pc, #244]	; (8002bdc <TIM_Base_SetConfig+0x118>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a3c      	ldr	r2, [pc, #240]	; (8002be0 <TIM_Base_SetConfig+0x11c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3b      	ldr	r2, [pc, #236]	; (8002be4 <TIM_Base_SetConfig+0x120>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3a      	ldr	r2, [pc, #232]	; (8002be8 <TIM_Base_SetConfig+0x124>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <TIM_Base_SetConfig+0x114>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d01b      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a2c      	ldr	r2, [pc, #176]	; (8002bdc <TIM_Base_SetConfig+0x118>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d017      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <TIM_Base_SetConfig+0x11c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <TIM_Base_SetConfig+0x120>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00f      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <TIM_Base_SetConfig+0x124>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a28      	ldr	r2, [pc, #160]	; (8002bec <TIM_Base_SetConfig+0x128>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <TIM_Base_SetConfig+0x12c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0x9a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <TIM_Base_SetConfig+0x130>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <TIM_Base_SetConfig+0x114>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00f      	beq.n	8002bbc <TIM_Base_SetConfig+0xf8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <TIM_Base_SetConfig+0x124>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <TIM_Base_SetConfig+0xf8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a11      	ldr	r2, [pc, #68]	; (8002bec <TIM_Base_SetConfig+0x128>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <TIM_Base_SetConfig+0xf8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <TIM_Base_SetConfig+0x12c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_Base_SetConfig+0xf8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	; (8002bf4 <TIM_Base_SetConfig+0x130>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	615a      	str	r2, [r3, #20]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40013400 	.word	0x40013400
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40014400 	.word	0x40014400
 8002bf4:	40014800 	.word	0x40014800

08002bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e040      	b.n	8002cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fde4 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f82c 	bl	8002cd0 <UART_SetConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e022      	b.n	8002cc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 faaa 	bl	80031e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fb31 	bl	8003328 <UART_CheckIdleState>
 8002cc6:	4603      	mov	r3, r0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002cd4:	b088      	sub	sp, #32
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4bac      	ldr	r3, [pc, #688]	; (8002fb0 <UART_SetConfig+0x2e0>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	69f9      	ldr	r1, [r7, #28]
 8002d06:	430b      	orrs	r3, r1
 8002d08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4aa2      	ldr	r2, [pc, #648]	; (8002fb4 <UART_SetConfig+0x2e4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d004      	beq.n	8002d3a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a99      	ldr	r2, [pc, #612]	; (8002fb8 <UART_SetConfig+0x2e8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d121      	bne.n	8002d9c <UART_SetConfig+0xcc>
 8002d58:	4b98      	ldr	r3, [pc, #608]	; (8002fbc <UART_SetConfig+0x2ec>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d816      	bhi.n	8002d94 <UART_SetConfig+0xc4>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <UART_SetConfig+0x9c>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d89 	.word	0x08002d89
 8002d74:	08002d83 	.word	0x08002d83
 8002d78:	08002d8f 	.word	0x08002d8f
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	76fb      	strb	r3, [r7, #27]
 8002d80:	e0e8      	b.n	8002f54 <UART_SetConfig+0x284>
 8002d82:	2302      	movs	r3, #2
 8002d84:	76fb      	strb	r3, [r7, #27]
 8002d86:	e0e5      	b.n	8002f54 <UART_SetConfig+0x284>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	76fb      	strb	r3, [r7, #27]
 8002d8c:	e0e2      	b.n	8002f54 <UART_SetConfig+0x284>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	76fb      	strb	r3, [r7, #27]
 8002d92:	e0df      	b.n	8002f54 <UART_SetConfig+0x284>
 8002d94:	2310      	movs	r3, #16
 8002d96:	76fb      	strb	r3, [r7, #27]
 8002d98:	bf00      	nop
 8002d9a:	e0db      	b.n	8002f54 <UART_SetConfig+0x284>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a87      	ldr	r2, [pc, #540]	; (8002fc0 <UART_SetConfig+0x2f0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d134      	bne.n	8002e10 <UART_SetConfig+0x140>
 8002da6:	4b85      	ldr	r3, [pc, #532]	; (8002fbc <UART_SetConfig+0x2ec>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d829      	bhi.n	8002e08 <UART_SetConfig+0x138>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <UART_SetConfig+0xec>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002e09 	.word	0x08002e09
 8002dc4:	08002e09 	.word	0x08002e09
 8002dc8:	08002e09 	.word	0x08002e09
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002e09 	.word	0x08002e09
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e09 	.word	0x08002e09
 8002ddc:	08002df7 	.word	0x08002df7
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	08002e09 	.word	0x08002e09
 8002dec:	08002e03 	.word	0x08002e03
 8002df0:	2300      	movs	r3, #0
 8002df2:	76fb      	strb	r3, [r7, #27]
 8002df4:	e0ae      	b.n	8002f54 <UART_SetConfig+0x284>
 8002df6:	2302      	movs	r3, #2
 8002df8:	76fb      	strb	r3, [r7, #27]
 8002dfa:	e0ab      	b.n	8002f54 <UART_SetConfig+0x284>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	76fb      	strb	r3, [r7, #27]
 8002e00:	e0a8      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e02:	2308      	movs	r3, #8
 8002e04:	76fb      	strb	r3, [r7, #27]
 8002e06:	e0a5      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e08:	2310      	movs	r3, #16
 8002e0a:	76fb      	strb	r3, [r7, #27]
 8002e0c:	bf00      	nop
 8002e0e:	e0a1      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6b      	ldr	r2, [pc, #428]	; (8002fc4 <UART_SetConfig+0x2f4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d120      	bne.n	8002e5c <UART_SetConfig+0x18c>
 8002e1a:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <UART_SetConfig+0x2ec>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d00f      	beq.n	8002e48 <UART_SetConfig+0x178>
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d802      	bhi.n	8002e32 <UART_SetConfig+0x162>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <UART_SetConfig+0x16c>
 8002e30:	e010      	b.n	8002e54 <UART_SetConfig+0x184>
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d005      	beq.n	8002e42 <UART_SetConfig+0x172>
 8002e36:	2b30      	cmp	r3, #48	; 0x30
 8002e38:	d009      	beq.n	8002e4e <UART_SetConfig+0x17e>
 8002e3a:	e00b      	b.n	8002e54 <UART_SetConfig+0x184>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	76fb      	strb	r3, [r7, #27]
 8002e40:	e088      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e42:	2302      	movs	r3, #2
 8002e44:	76fb      	strb	r3, [r7, #27]
 8002e46:	e085      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	76fb      	strb	r3, [r7, #27]
 8002e4c:	e082      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	76fb      	strb	r3, [r7, #27]
 8002e52:	e07f      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e54:	2310      	movs	r3, #16
 8002e56:	76fb      	strb	r3, [r7, #27]
 8002e58:	bf00      	nop
 8002e5a:	e07b      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a59      	ldr	r2, [pc, #356]	; (8002fc8 <UART_SetConfig+0x2f8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d120      	bne.n	8002ea8 <UART_SetConfig+0x1d8>
 8002e66:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <UART_SetConfig+0x2ec>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d00f      	beq.n	8002e94 <UART_SetConfig+0x1c4>
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d802      	bhi.n	8002e7e <UART_SetConfig+0x1ae>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <UART_SetConfig+0x1b8>
 8002e7c:	e010      	b.n	8002ea0 <UART_SetConfig+0x1d0>
 8002e7e:	2b80      	cmp	r3, #128	; 0x80
 8002e80:	d005      	beq.n	8002e8e <UART_SetConfig+0x1be>
 8002e82:	2bc0      	cmp	r3, #192	; 0xc0
 8002e84:	d009      	beq.n	8002e9a <UART_SetConfig+0x1ca>
 8002e86:	e00b      	b.n	8002ea0 <UART_SetConfig+0x1d0>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	76fb      	strb	r3, [r7, #27]
 8002e8c:	e062      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	76fb      	strb	r3, [r7, #27]
 8002e92:	e05f      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e94:	2304      	movs	r3, #4
 8002e96:	76fb      	strb	r3, [r7, #27]
 8002e98:	e05c      	b.n	8002f54 <UART_SetConfig+0x284>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	76fb      	strb	r3, [r7, #27]
 8002e9e:	e059      	b.n	8002f54 <UART_SetConfig+0x284>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	76fb      	strb	r3, [r7, #27]
 8002ea4:	bf00      	nop
 8002ea6:	e055      	b.n	8002f54 <UART_SetConfig+0x284>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <UART_SetConfig+0x2fc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d124      	bne.n	8002efc <UART_SetConfig+0x22c>
 8002eb2:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <UART_SetConfig+0x2ec>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec0:	d012      	beq.n	8002ee8 <UART_SetConfig+0x218>
 8002ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec6:	d802      	bhi.n	8002ece <UART_SetConfig+0x1fe>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <UART_SetConfig+0x20c>
 8002ecc:	e012      	b.n	8002ef4 <UART_SetConfig+0x224>
 8002ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed2:	d006      	beq.n	8002ee2 <UART_SetConfig+0x212>
 8002ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed8:	d009      	beq.n	8002eee <UART_SetConfig+0x21e>
 8002eda:	e00b      	b.n	8002ef4 <UART_SetConfig+0x224>
 8002edc:	2300      	movs	r3, #0
 8002ede:	76fb      	strb	r3, [r7, #27]
 8002ee0:	e038      	b.n	8002f54 <UART_SetConfig+0x284>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	76fb      	strb	r3, [r7, #27]
 8002ee6:	e035      	b.n	8002f54 <UART_SetConfig+0x284>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	76fb      	strb	r3, [r7, #27]
 8002eec:	e032      	b.n	8002f54 <UART_SetConfig+0x284>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	76fb      	strb	r3, [r7, #27]
 8002ef2:	e02f      	b.n	8002f54 <UART_SetConfig+0x284>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	bf00      	nop
 8002efa:	e02b      	b.n	8002f54 <UART_SetConfig+0x284>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <UART_SetConfig+0x2e4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d124      	bne.n	8002f50 <UART_SetConfig+0x280>
 8002f06:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <UART_SetConfig+0x2ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d012      	beq.n	8002f3c <UART_SetConfig+0x26c>
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d802      	bhi.n	8002f22 <UART_SetConfig+0x252>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <UART_SetConfig+0x260>
 8002f20:	e012      	b.n	8002f48 <UART_SetConfig+0x278>
 8002f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f26:	d006      	beq.n	8002f36 <UART_SetConfig+0x266>
 8002f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f2c:	d009      	beq.n	8002f42 <UART_SetConfig+0x272>
 8002f2e:	e00b      	b.n	8002f48 <UART_SetConfig+0x278>
 8002f30:	2300      	movs	r3, #0
 8002f32:	76fb      	strb	r3, [r7, #27]
 8002f34:	e00e      	b.n	8002f54 <UART_SetConfig+0x284>
 8002f36:	2302      	movs	r3, #2
 8002f38:	76fb      	strb	r3, [r7, #27]
 8002f3a:	e00b      	b.n	8002f54 <UART_SetConfig+0x284>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	76fb      	strb	r3, [r7, #27]
 8002f40:	e008      	b.n	8002f54 <UART_SetConfig+0x284>
 8002f42:	2308      	movs	r3, #8
 8002f44:	76fb      	strb	r3, [r7, #27]
 8002f46:	e005      	b.n	8002f54 <UART_SetConfig+0x284>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	76fb      	strb	r3, [r7, #27]
 8002f4c:	bf00      	nop
 8002f4e:	e001      	b.n	8002f54 <UART_SetConfig+0x284>
 8002f50:	2310      	movs	r3, #16
 8002f52:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <UART_SetConfig+0x2e4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	f040 8087 	bne.w	800306e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f60:	7efb      	ldrb	r3, [r7, #27]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d836      	bhi.n	8002fd4 <UART_SetConfig+0x304>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <UART_SetConfig+0x29c>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f91 	.word	0x08002f91
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08002f99 	.word	0x08002f99
 8002f78:	08002fd5 	.word	0x08002fd5
 8002f7c:	08002f9f 	.word	0x08002f9f
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002fd5 	.word	0x08002fd5
 8002f88:	08002fd5 	.word	0x08002fd5
 8002f8c:	08002fa7 	.word	0x08002fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f90:	f7fe fe4c 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8002f94:	6178      	str	r0, [r7, #20]
        break;
 8002f96:	e022      	b.n	8002fde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <UART_SetConfig+0x300>)
 8002f9a:	617b      	str	r3, [r7, #20]
        break;
 8002f9c:	e01f      	b.n	8002fde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9e:	f7fe fdaf 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8002fa2:	6178      	str	r0, [r7, #20]
        break;
 8002fa4:	e01b      	b.n	8002fde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002faa:	617b      	str	r3, [r7, #20]
        break;
 8002fac:	e017      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fae:	bf00      	nop
 8002fb0:	efff69f3 	.word	0xefff69f3
 8002fb4:	40008000 	.word	0x40008000
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40004800 	.word	0x40004800
 8002fc8:	40004c00 	.word	0x40004c00
 8002fcc:	40005000 	.word	0x40005000
 8002fd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	76bb      	strb	r3, [r7, #26]
        break;
 8002fdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80f1 	beq.w	80031c8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d305      	bcc.n	8003002 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d902      	bls.n	8003008 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	76bb      	strb	r3, [r7, #26]
 8003006:	e0df      	b.n	80031c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	4619      	mov	r1, r3
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	f04f 0400 	mov.w	r4, #0
 8003018:	0214      	lsls	r4, r2, #8
 800301a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800301e:	020b      	lsls	r3, r1, #8
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6852      	ldr	r2, [r2, #4]
 8003024:	0852      	lsrs	r2, r2, #1
 8003026:	4611      	mov	r1, r2
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	eb13 0b01 	adds.w	fp, r3, r1
 8003030:	eb44 0c02 	adc.w	ip, r4, r2
 8003034:	4658      	mov	r0, fp
 8003036:	4661      	mov	r1, ip
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	461a      	mov	r2, r3
 8003042:	4623      	mov	r3, r4
 8003044:	f7fd f8c0 	bl	80001c8 <__aeabi_uldivmod>
 8003048:	4603      	mov	r3, r0
 800304a:	460c      	mov	r4, r1
 800304c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003054:	d308      	bcc.n	8003068 <UART_SetConfig+0x398>
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305c:	d204      	bcs.n	8003068 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	e0af      	b.n	80031c8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	76bb      	strb	r3, [r7, #26]
 800306c:	e0ac      	b.n	80031c8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003076:	d15b      	bne.n	8003130 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003078:	7efb      	ldrb	r3, [r7, #27]
 800307a:	2b08      	cmp	r3, #8
 800307c:	d827      	bhi.n	80030ce <UART_SetConfig+0x3fe>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <UART_SetConfig+0x3b4>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030b1 	.word	0x080030b1
 800308c:	080030b9 	.word	0x080030b9
 8003090:	080030cf 	.word	0x080030cf
 8003094:	080030bf 	.word	0x080030bf
 8003098:	080030cf 	.word	0x080030cf
 800309c:	080030cf 	.word	0x080030cf
 80030a0:	080030cf 	.word	0x080030cf
 80030a4:	080030c7 	.word	0x080030c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a8:	f7fe fdc0 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 80030ac:	6178      	str	r0, [r7, #20]
        break;
 80030ae:	e013      	b.n	80030d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b0:	f7fe fdd2 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 80030b4:	6178      	str	r0, [r7, #20]
        break;
 80030b6:	e00f      	b.n	80030d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b8:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <UART_SetConfig+0x510>)
 80030ba:	617b      	str	r3, [r7, #20]
        break;
 80030bc:	e00c      	b.n	80030d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030be:	f7fe fd1f 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 80030c2:	6178      	str	r0, [r7, #20]
        break;
 80030c4:	e008      	b.n	80030d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ca:	617b      	str	r3, [r7, #20]
        break;
 80030cc:	e004      	b.n	80030d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	76bb      	strb	r3, [r7, #26]
        break;
 80030d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d074      	beq.n	80031c8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005a      	lsls	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d916      	bls.n	800312a <UART_SetConfig+0x45a>
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d212      	bcs.n	800312a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f023 030f 	bic.w	r3, r3, #15
 800310c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	b29b      	uxth	r3, r3
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	b29a      	uxth	r2, r3
 800311a:	89fb      	ldrh	r3, [r7, #14]
 800311c:	4313      	orrs	r3, r2
 800311e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	89fa      	ldrh	r2, [r7, #14]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	e04e      	b.n	80031c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	76bb      	strb	r3, [r7, #26]
 800312e:	e04b      	b.n	80031c8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003130:	7efb      	ldrb	r3, [r7, #27]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d827      	bhi.n	8003186 <UART_SetConfig+0x4b6>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <UART_SetConfig+0x46c>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003161 	.word	0x08003161
 8003140:	08003169 	.word	0x08003169
 8003144:	08003171 	.word	0x08003171
 8003148:	08003187 	.word	0x08003187
 800314c:	08003177 	.word	0x08003177
 8003150:	08003187 	.word	0x08003187
 8003154:	08003187 	.word	0x08003187
 8003158:	08003187 	.word	0x08003187
 800315c:	0800317f 	.word	0x0800317f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7fe fd64 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8003164:	6178      	str	r0, [r7, #20]
        break;
 8003166:	e013      	b.n	8003190 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7fe fd76 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 800316c:	6178      	str	r0, [r7, #20]
        break;
 800316e:	e00f      	b.n	8003190 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <UART_SetConfig+0x510>)
 8003172:	617b      	str	r3, [r7, #20]
        break;
 8003174:	e00c      	b.n	8003190 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003176:	f7fe fcc3 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 800317a:	6178      	str	r0, [r7, #20]
        break;
 800317c:	e008      	b.n	8003190 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	617b      	str	r3, [r7, #20]
        break;
 8003184:	e004      	b.n	8003190 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	76bb      	strb	r3, [r7, #26]
        break;
 800318e:	bf00      	nop
    }

    if (pclk != 0U)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d018      	beq.n	80031c8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	085a      	lsrs	r2, r3, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d908      	bls.n	80031c4 <UART_SetConfig+0x4f4>
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d204      	bcs.n	80031c4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	e001      	b.n	80031c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80031e0:	00f42400 	.word	0x00f42400

080031e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01a      	beq.n	80032fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e2:	d10a      	bne.n	80032fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003336:	f7fd fbbf 	bl	8000ab8 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d10e      	bne.n	8003368 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800334a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f82a 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e020      	b.n	80033aa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d10e      	bne.n	8003394 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003376:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f814 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e00a      	b.n	80033aa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c2:	e05d      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ca:	d059      	beq.n	8003480 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033cc:	f7fd fb74 	bl	8000ab8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11b      	bne.n	800341a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e042      	b.n	80034a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02b      	beq.n	8003480 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003436:	d123      	bne.n	8003480 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003440:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003450:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e00f      	b.n	80034a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	429a      	cmp	r2, r3
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	429a      	cmp	r2, r3
 800349c:	d092      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <__libc_init_array>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	4e0d      	ldr	r6, [pc, #52]	; (80034e0 <__libc_init_array+0x38>)
 80034ac:	4c0d      	ldr	r4, [pc, #52]	; (80034e4 <__libc_init_array+0x3c>)
 80034ae:	1ba4      	subs	r4, r4, r6
 80034b0:	10a4      	asrs	r4, r4, #2
 80034b2:	2500      	movs	r5, #0
 80034b4:	42a5      	cmp	r5, r4
 80034b6:	d109      	bne.n	80034cc <__libc_init_array+0x24>
 80034b8:	4e0b      	ldr	r6, [pc, #44]	; (80034e8 <__libc_init_array+0x40>)
 80034ba:	4c0c      	ldr	r4, [pc, #48]	; (80034ec <__libc_init_array+0x44>)
 80034bc:	f000 f820 	bl	8003500 <_init>
 80034c0:	1ba4      	subs	r4, r4, r6
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	2500      	movs	r5, #0
 80034c6:	42a5      	cmp	r5, r4
 80034c8:	d105      	bne.n	80034d6 <__libc_init_array+0x2e>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034d0:	4798      	blx	r3
 80034d2:	3501      	adds	r5, #1
 80034d4:	e7ee      	b.n	80034b4 <__libc_init_array+0xc>
 80034d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034da:	4798      	blx	r3
 80034dc:	3501      	adds	r5, #1
 80034de:	e7f2      	b.n	80034c6 <__libc_init_array+0x1e>
 80034e0:	08003568 	.word	0x08003568
 80034e4:	08003568 	.word	0x08003568
 80034e8:	08003568 	.word	0x08003568
 80034ec:	0800356c 	.word	0x0800356c

080034f0 <memset>:
 80034f0:	4402      	add	r2, r0
 80034f2:	4603      	mov	r3, r0
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d100      	bne.n	80034fa <memset+0xa>
 80034f8:	4770      	bx	lr
 80034fa:	f803 1b01 	strb.w	r1, [r3], #1
 80034fe:	e7f9      	b.n	80034f4 <memset+0x4>

08003500 <_init>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	bf00      	nop
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr

0800350c <_fini>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	bf00      	nop
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr
